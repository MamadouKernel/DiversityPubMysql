@model IEnumerable<DiversityPub.Models.Activation>

@{
    ViewData["Title"] = "Gestion des Activations";
    Layout = "_Layout";
}

<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h4 class="mb-0">
                    <i class="fas fa-map-marker-alt"></i> Gestion des Activations
                </h4>
                <div class="d-flex gap-2">
                    <a href="@Url.Action("Create", "Activation")" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Nouvelle Activation
                    </a>
                </div>
            </div>
        </div>
        </div>
    </div>

<!-- Filtres -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0"><i class="fas fa-filter"></i> Filtres</h6>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="searchInput" class="form-label">Recherche</label>
                        <input type="text" id="searchInput" class="form-control" placeholder="Rechercher...">
                    </div>
                    <div class="col-md-2">
                        <label for="statusFilter" class="form-label">Statut</label>
                        <select id="statusFilter" class="form-select">
                            <option value="">Tous</option>
                            <option value="Planifiee">Planifiée</option>
                            <option value="EnCours">En cours</option>
                            <option value="Terminee">Terminée</option>
                            <option value="Suspendue">Suspendue</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="campaignFilter" class="form-label">Campagne</label>
                        <select id="campaignFilter" class="form-select">
                            <option value="">Toutes</option>
                            @foreach (var campagne in Model.Select(a => a.Campagne.Nom).Distinct())
                            {
                                <option value="@campagne">@campagne</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="locationFilter" class="form-label">Lieu</label>
                        <select id="locationFilter" class="form-select">
                            <option value="">Tous</option>
                            @foreach (var lieu in Model.Select(a => a.Lieu.Nom).Distinct())
                            {
                                <option value="@lieu">@lieu</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="agentsFilter" class="form-label">Agents</label>
                        <select id="agentsFilter" class="form-select">
                            <option value="">Tous</option>
                            <option value="with-agents">Avec agents</option>
                            <option value="without-agents">Sans agent</option>
                        </select>
                    </div>
                    <div class="col-md-1">
                        <label class="form-label">&nbsp;</label>
                        <button type="button" class="btn btn-outline-secondary w-100" onclick="clearFilters()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-3">
                        <label for="dateStart" class="form-label">Du</label>
                        <input id="dateStart" class="form-control" type="date">
                    </div>
                    <div class="col-md-3">
                        <label for="dateEnd" class="form-label">Au</label>
                        <input id="dateEnd" class="form-control" type="date">
                    </div>
                    <div class="col-md-6 d-flex align-items-end">
                        <div class="badge bg-info" id="resultsChip" style="display:none"></div>
                    </div>
                </div>
                    </div>
                </div>
            </div>
        </div>

@if (Model.Any())
{
    <!-- Grille de cards activations -->
    <div class="row" id="activationsCardsContainer">
                        @foreach (var activation in Model)
                        {
            <div class="col-lg-4 col-md-6 col-sm-12 mb-4 activation-card" 
                 data-nom="@activation.Nom"
                                data-campagne="@activation.Campagne.Nom"
                                data-lieu="@($"{activation.Lieu.Nom} - {activation.Lieu.Adresse}")"
                                data-statut="@activation.Statut"
                                data-date="@activation.DateActivation.ToString("yyyy-MM-dd")"
                                data-agents="@activation.AgentsTerrain.Count">
                <div class="card h-100 shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <div class="activation-avatar me-3">
                                <i class="fas fa-map-marker-alt"></i>
                            </div>
                            <div>
                                <h6 class="mb-0">@activation.Nom</h6>
                                    @if (!string.IsNullOrEmpty(activation.Description))
                                    {
                                    <small class="text-muted">@activation.Description</small>
                                }
                            </div>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li>
                                    <a class="dropdown-item" href="@Url.Action("Details", new { id = activation.Id })">
                                        <i class="fas fa-eye text-info"></i> Voir détails
                                    </a>
                                </li>
                                <li>
                                    <a class="dropdown-item" href="@Url.Action("Edit", new { id = activation.Id })">
                                        <i class="fas fa-edit text-warning"></i> Modifier
                                    </a>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                                <li>
                                    <a class="dropdown-item text-danger" href="#" onclick="confirmDelete('@activation.Id')">
                                        <i class="fas fa-trash"></i> Supprimer
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-6">
                                <small class="text-muted">Campagne</small>
                                <div>
                                    <small><i class="fas fa-bullhorn text-primary"></i> @activation.Campagne.Nom</small>
                                    <br><small class="text-muted">@activation.Campagne.Client.RaisonSociale</small>
                                </div>
                            </div>
                            <div class="col-6">
                                <small class="text-muted">Statut</small>
                                <div>
                                    @switch (activation.Statut)
                                    {
                                        case DiversityPub.Models.enums.StatutActivation.Planifiee:
                                            <span class="badge bg-warning">Planifiée</span>
                                            break;
                                        case DiversityPub.Models.enums.StatutActivation.EnCours:
                                            <span class="badge bg-info">En cours</span>
                                            break;
                                        case DiversityPub.Models.enums.StatutActivation.Terminee:
                                            <span class="badge bg-success">Terminée</span>
                                            break;
                                        case DiversityPub.Models.enums.StatutActivation.Suspendue:
                                            <span class="badge bg-secondary">Suspendue</span>
                                            break;
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <small class="text-muted">Lieu</small>
                            <div>
                                <small><i class="fas fa-map-marker-alt text-danger"></i> @activation.Lieu.Nom</small>
                                <br><small class="text-muted">@activation.Lieu.Adresse</small>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-6">
                                <small class="text-muted">Date</small>
                                <div>
                                    <small><i class="fas fa-calendar text-success"></i> @activation.DateActivation.ToString("dd/MM/yyyy")</small>
                                </div>
                            </div>
                            <div class="col-6">
                                <small class="text-muted">Horaires</small>
                                <div>
                                    <small><i class="fas fa-clock text-primary"></i> @($"{activation.HeureDebut.Hours:D2}:{activation.HeureDebut.Minutes:D2}") - @($"{activation.HeureFin.Hours:D2}:{activation.HeureFin.Minutes:D2}")</small>
                                </div>
            </div>
        </div>
                        
                        <div class="mb-3">
                            <small class="text-muted">Responsable</small>
                            <div>
                                @if (activation.Responsable != null)
                                {
                                    <small><i class="fas fa-user-tie text-info"></i> @activation.Responsable.Utilisateur.Prenom @activation.Responsable.Utilisateur.Nom</small>
    }
    else
    {
                                    <small class="text-muted"><i class="fas fa-user-slash"></i> Aucun</small>
                                }
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <small class="text-muted">Agents</small>
                            <div>
                                <span class="badge @(activation.AgentsTerrain.Count > 0 ? "bg-success" : "bg-secondary")">
                                    @activation.AgentsTerrain.Count agent@(activation.AgentsTerrain.Count > 1 ? "s" : "")
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer bg-transparent">
                        <div class="d-flex justify-content-end">
                            <div class="btn-group btn-group-sm">
                                <a href="@Url.Action("Details", new { id = activation.Id })" 
                                   class="btn btn-outline-info" title="Détails">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a href="@Url.Action("Edit", new { id = activation.Id })" 
                                   class="btn btn-outline-warning" title="Modifier">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button class="btn btn-outline-danger" title="Supprimer" onclick="confirmDelete('@activation.Id')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
            </div>
        </div>
    }
</div>
}
else
{
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body text-center py-5">
                    <i class="fas fa-map-marker-alt fa-3x text-muted mb-3"></i>
                    <h5>Aucune activation trouvée</h5>
                    <p class="text-muted">Commencez par créer votre première activation.</p>
                    <a href="@Url.Action("Create", "Activation")" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Créer une activation
                    </a>
                </div>
            </div>
        </div>
    </div>
}

<style>
.activation-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: linear-gradient(135deg, #A32D18, #EDAC00);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 16px;
}

.activation-card {
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.activation-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
}

.badge {
    font-size: 0.75rem;
}

.card-header {
    background: linear-gradient(135deg, #f8f9fa, #e9ecef);
    border-bottom: 1px solid #dee2e6;
}

.btn-group-sm .btn {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
}
</style>

<script>
    // state
    let originalData = [];
    let filteredData = [];

    document.addEventListener('DOMContentLoaded', () => {
        cacheCards();
      attachEvents();
      applyFilters();
    });

    function cacheCards(){
        const cards = document.querySelectorAll('.activation-card');
        originalData = Array.from(cards).map(card => ({
            element: card,
            data: {
                nom: card.dataset.nom || '',
                campagne: card.dataset.campagne || '',
                lieu: card.dataset.lieu || '',
                statut: card.dataset.statut || '',
                date: card.dataset.date || '',
                agents: parseInt(card.dataset.agents) || 0,
        }
      }));
      filteredData = [...originalData];
    }

    function attachEvents(){
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('input', debounce(applyFilters, 250));
        }
        
        ['statusFilter','campaignFilter','locationFilter','agentsFilter','dateStart','dateEnd']
            .forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('change', applyFilters);
                }
            });
    }

    function applyFilters(){
        const q = (document.getElementById('searchInput')?.value || '').toLowerCase();
        const fs = id => document.getElementById(id)?.value || '';
        const status = fs('statusFilter'), camp = fs('campaignFilter'), loc = fs('locationFilter'), ag = fs('agentsFilter');
        const d1 = fs('dateStart'), d2 = fs('dateEnd');

        filteredData = originalData.filter(it => {
        const t = `${it.data.nom} ${it.data.campagne} ${it.data.lieu}`.toLowerCase();
        if(q && !t.includes(q)) return false;
            if(status && it.data.statut !== status) return false;
            if(camp && it.data.campagne !== camp) return false;
            if(loc && it.data.lieu !== loc) return false;
            if(ag === 'with-agents' && it.data.agents <= 0) return false;
            if(ag === 'without-agents' && it.data.agents > 0) return false;
        if(d1 || d2){
          const dt = new Date(it.data.date);
          if(d1 && dt < new Date(d1)) return false;
          if(d2 && dt > new Date(d2)) return false;
        }
        return true;
      });

        renderCards();
      updateChip();
    }

    function renderCards(){
        const container = document.getElementById('activationsCardsContainer');
        if(!container) return;
        
        // Cacher toutes les cards
        originalData.forEach(it => it.element.style.display = 'none');
        
        // Afficher seulement les cards filtrées
        filteredData.forEach(it => it.element.style.display = 'block');
    }

    function updateChip(){
      const chip = document.getElementById('resultsChip');
      if(!chip) return;
        const c = filteredData.length, t = originalData.length;
        if(c === t){ 
            chip.style.display = 'none'; 
            return; 
        }
        chip.textContent = `${c} résultat${c > 1 ? 's' : ''} / ${t}`;
        chip.style.display = 'inline-flex';
    }

    function clearFilters(){
      ['searchInput','statusFilter','campaignFilter','locationFilter','agentsFilter','dateStart','dateEnd']
            .forEach(id => { 
                const el = document.getElementById(id); 
                if(el) el.value = ''; 
            });
      applyFilters();
    }

    function confirmDelete(id){
      if(confirm('Êtes-vous sûr de vouloir supprimer cette activation ?')){
        window.location.href = '@Url.Action("Delete", "Activation")?id=' + id;
      }
    }

    function debounce(fn, wait){ 
        let t; 
        return (...a) => { 
            clearTimeout(t); 
            t = setTimeout(() => fn.apply(null, a), wait); 
        }; 
    }
</script>
