@model DiversityPub.Models.Activation
@{
    Layout = null;
    ViewData["Title"] = "Détails de l'Activation";
    var agent = ViewBag.Agent as DiversityPub.Models.AgentTerrain;
    var warningMessage = ViewBag.WarningMessage as string;
}

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Diversity Pub</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            overflow: hidden;
            height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .agent-dashboard {
            height: 100vh;
            display: flex;
            flex-direction: column;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
        }
        
        .dashboard-header {
            background: linear-gradient(135deg, #A32D18 0%, #EDAC00 100%);
            color: white;
            padding: 1rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        
        .dashboard-content {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
        }
        
        .detail-card {
            transition: all 0.3s ease;
            border: none;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            background: rgba(255, 255, 255, 0.9);
        }
        
        .detail-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 30px rgba(0,0,0,0.15);
        }
        
        .status-badge {
            border-radius: 20px;
            padding: 0.5rem 1rem;
            font-weight: 600;
            font-size: 0.8rem;
        }
        
        .action-btn {
            border-radius: 25px;
            padding: 0.5rem 1rem;
            font-size: 0.8rem;
            font-weight: 600;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }
        
        .action-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .nav-btn {
            border-radius: 25px;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            transition: all 0.3s ease;
            border: 2px solid rgba(255,255,255,0.3);
        }
        
        .nav-btn:hover {
            transform: scale(1.05);
            border-color: rgba(255,255,255,0.8);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        /* Toast notifications */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
        }
        
        .toast {
            border-radius: 15px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }
    </style>
</head>
<body>
    <div class="agent-dashboard">
        <!-- Header fixe -->
        <div class="dashboard-header">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <div class="d-flex align-items-center">
                        <div class="me-4">
                            <i class="fas fa-info-circle fa-3x"></i>
                        </div>
                        <div>
                            <h2 class="mb-1">Détails Mission</h2>
                            <p class="mb-0 fs-5">@agent?.Utilisateur.Prenom @agent?.Utilisateur.Nom</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 text-end">
                    <div class="d-flex justify-content-end gap-2">
                        <a href="@Url.Action("Missions", "AgentTerrain")" class="btn nav-btn btn-outline-light">
                            <i class="fas fa-arrow-left"></i> Retour
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Contenu principal -->
        <div class="dashboard-content">
            @if (!string.IsNullOrEmpty(warningMessage))
            {
                <div class="alert alert-warning alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle"></i>
                    @warningMessage
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            <div class="row">
                <div class="col-12">
                    <div class="card detail-card">
                        <div class="card-header d-flex justify-content-between align-items-center bg-transparent border-0">
                            <h4 class="mb-0">
                                <i class="fas fa-info-circle"></i> @Model.Nom
                            </h4>
                            <span class="badge status-badge @GetStatusBadgeClass(Model.Statut)">
                                @GetStatusText(Model.Statut)
                            </span>
                        </div>
                        <div class="card-body">
                            @if (!string.IsNullOrEmpty(Model.Description))
                            {
                                <p class="text-muted mb-4">@Model.Description</p>
                            }
                            
                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <div class="card detail-card">
                                        <div class="card-header">
                                            <h6 class="mb-0"><i class="fas fa-calendar"></i> Informations Générales</h6>
                                        </div>
                                        <div class="card-body">
                                            <p><strong>Campagne:</strong> @Model.Campagne?.Nom</p>
                                            <p><strong>Lieu:</strong> @Model.Lieu?.Nom - @Model.Lieu?.Adresse</p>
                                            <p><strong>Adresse:</strong> @Model.Lieu?.Adresse</p>
                                            <p><strong>Date:</strong> @Model.DateActivation.ToString("dd/MM/yyyy")</p>
                                            <p><strong>Heures:</strong> @Model.HeureDebut.ToString(@"hh\:mm") - @Model.HeureFin.ToString(@"hh\:mm")</p>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="col-md-6">
                                    <div class="card detail-card">
                                        <div class="card-header">
                                            <h6 class="mb-0"><i class="fas fa-users"></i> Équipe</h6>
                                        </div>
                                        <div class="card-body">
                                            @if (Model.AgentsTerrain != null && Model.AgentsTerrain.Count > 0)
                                            {
                                                <ul class="list-unstyled">
                                                    @foreach (var agentTerrain in Model.AgentsTerrain)
                                                    {
                                                        <li class="mb-2">
                                                            <i class="fas fa-user"></i> 
                                                            @agentTerrain.Utilisateur.Prenom @agentTerrain.Utilisateur.Nom
                                                            @if (Model.ResponsableId == agentTerrain.Id)
                                                            {
                                                                <span class="badge bg-primary ms-2">Responsable</span>
                                                            }
                                                        </li>
                                                    }
                                                </ul>
                                            }
                                            else
                                            {
                                                <p class="text-muted">Aucun agent assigné</p>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(Model.Instructions))
                            {
                                <div class="card detail-card mb-4">
                                    <div class="card-header">
                                        <h6 class="mb-0"><i class="fas fa-clipboard-list"></i> Instructions</h6>
                                    </div>
                                    <div class="card-body">
                                        <p>@Model.Instructions</p>
                                    </div>
                                </div>
                            }
                            
                            <div class="card detail-card">
                                <div class="card-header">
                                    <h6 class="mb-0"><i class="fas fa-cogs"></i> Actions</h6>
                                </div>
                                <div class="card-body">
                                    @{
                                        bool estResponsable = Model.ResponsableId != null && Model.ResponsableId == agent?.Id;
                                    }
                                    
                                    @if (estResponsable)
                                    {
                                        <div class="alert alert-success">
                                            <i class="fas fa-crown"></i> <strong>Responsable de l'activation</strong> - Vous pouvez effectuer toutes les actions
                                        </div>
                                        
                                        <div class="d-flex gap-2 flex-wrap">
                                            @if (Model.Statut == DiversityPub.Models.enums.StatutActivation.Planifiee && 
                                                 Model.DateActivation.Date == DateTime.Today)
                                            {
                                                <button onclick="demarrerActivation('@Model.Id')" 
                                                        class="btn action-btn btn-success">
                                                    <i class="fas fa-play"></i> Démarrer
                                                </button>
                                            }
                                            else if (Model.Statut == DiversityPub.Models.enums.StatutActivation.EnCours)
                                            {
                                                <button onclick="terminerActivation('@Model.Id')" 
                                                        class="btn action-btn btn-warning">
                                                    <i class="fas fa-stop"></i> Terminer
                                                </button>
                                                <button onclick="suspendreActivation('@Model.Id')" 
                                                        class="btn action-btn btn-outline-warning">
                                                    <i class="fas fa-pause"></i> Suspendre
                                                </button>
                                            }
                                            else if (Model.Statut == DiversityPub.Models.enums.StatutActivation.Suspendue)
                                            {
                                                <button onclick="reprendreActivation('@Model.Id')" 
                                                        class="btn action-btn btn-success">
                                                    <i class="fas fa-play"></i> Reprendre
                                                </button>
                                            }
                                            
                                            <a href="@Url.Action("SignalerIncident", "AgentTerrain", new { activationId = Model.Id })" 
                                               class="btn action-btn btn-outline-danger">
                                                <i class="fas fa-exclamation-triangle"></i> Signaler Incident
                                            </a>
                                            
                                            <a href="@Url.Action("EnvoyerPreuve", "AgentTerrain", new { activationId = Model.Id })" 
                                               class="btn action-btn btn-outline-info">
                                                <i class="fas fa-upload"></i> Envoyer Preuve
                                            </a>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="alert alert-warning">
                                            <i class="fas fa-info-circle"></i> <strong>Agent participant</strong> - Vous pouvez consulter les détails mais seul le responsable peut effectuer des actions
                                        </div>
                                        
                                        <div class="d-flex gap-2 flex-wrap">
                                            <span class="btn action-btn btn-outline-secondary disabled">
                                                <i class="fas fa-lock"></i> Actions réservées au responsable
                                            </span>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Section Preuves de cette activation -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-images text-primary"></i>
                            Preuves de cette mission
                            @if (Model.Medias?.Any() == true)
                            {
                                <span class="badge bg-primary ms-2">@Model.Medias.Count</span>
                            }
                        </h5>
                        <a href="@Url.Action("EnvoyerPreuve", "AgentTerrain", new { activationId = Model.Id })" 
                           class="btn btn-success btn-sm">
                            <i class="fas fa-plus"></i> Ajouter une preuve
                        </a>
                    </div>
                    <div class="card-body">
                        @if (Model.Medias?.Any() == true)
                        {
                            <div class="row">
                                @foreach (var media in Model.Medias.OrderByDescending(m => m.DateUpload))
                                {
                                    <div class="col-md-4 col-lg-3 mb-3">
                                        <div class="card h-100 border-0 shadow-sm">
                                            <div class="card-body text-center p-3">
                                                @if (media.Type == DiversityPub.Models.enums.TypeMedia.Photo)
                                                {
                                                    <i class="fas fa-image fa-2x text-success mb-2"></i>
                                                }
                                                else if (media.Type == DiversityPub.Models.enums.TypeMedia.Video)
                                                {
                                                    <i class="fas fa-video fa-2x text-info mb-2"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-file-alt fa-2x text-warning mb-2"></i>
                                                }
                                                
                                                <h6 class="card-title small">@media.Description</h6>
                                                <p class="text-muted small mb-2">
                                                    <i class="fas fa-calendar"></i> @media.DateUpload.ToString("dd/MM/yyyy")
                                                    <br>
                                                    <i class="fas fa-clock"></i> @media.DateUpload.ToString("HH:mm")
                                                </p>
                                                
                                                <div class="mb-2">
                                                    @if (media.Valide)
                                                    {
                                                        <span class="badge bg-success">
                                                            <i class="fas fa-check"></i> Validé
                                                        </span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-warning">
                                                            <i class="fas fa-clock"></i> En attente
                                                        </span>
                                                    }
                                                </div>
                                                
                                                <a href="@Url.Action("DetailsPreuve", "AgentTerrain", new { id = media.Id })" 
                                                   class="btn btn-outline-primary btn-sm">
                                                    <i class="fas fa-eye"></i> Voir
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-images fa-3x text-muted mb-3"></i>
                                <h6 class="text-muted">Aucune preuve pour cette mission</h6>
                                <p class="text-muted">Commencez par envoyer votre première preuve.</p>
                                <a href="@Url.Action("EnvoyerPreuve", "AgentTerrain", new { activationId = Model.Id })" 
                                   class="btn btn-primary">
                                    <i class="fas fa-camera"></i> Envoyer une preuve
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast container -->
    <div class="toast-container"></div>

    <!-- Anti-forgery token -->
    @Html.AntiForgeryToken()

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        function demarrerActivation(activationId) {
            if (confirm('Êtes-vous sûr de vouloir démarrer cette activation ?')) {
                $.ajax({
                    url: '@Url.Action("DemarrerActivation", "AgentTerrain")',
                    type: 'POST',
                    data: { 
                        activationId: activationId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            showToast('success', response.message);
                            setTimeout(function() {
                                location.reload();
                            }, 1500);
                        } else {
                            showToast('error', response.message);
                        }
                    },
                    error: function() {
                        showToast('error', 'Erreur lors du démarrage de l\'activation');
                    }
                });
            }
        }

        function terminerActivation(activationId) {
            if (confirm('Êtes-vous sûr de vouloir terminer cette activation ?')) {
                $.ajax({
                    url: '@Url.Action("TerminerActivation", "AgentTerrain")',
                    type: 'POST',
                    data: { 
                        activationId: activationId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            showToast('success', response.message);
                            setTimeout(function() {
                                location.reload();
                            }, 1500);
                        } else {
                            showToast('error', response.message);
                        }
                    },
                    error: function() {
                        showToast('error', 'Erreur lors de la terminaison de l\'activation');
                    }
                });
            }
        }

        function suspendreActivation(activationId) {
            if (confirm('Êtes-vous sûr de vouloir suspendre cette activation ?')) {
                $.ajax({
                    url: '@Url.Action("SuspendreActivation", "AgentTerrain")',
                    type: 'POST',
                    data: { 
                        activationId: activationId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            showToast('success', response.message);
                            setTimeout(function() {
                                location.reload();
                            }, 1500);
                        } else {
                            showToast('error', response.message);
                        }
                    },
                    error: function() {
                        showToast('error', 'Erreur lors de la suspension de l\'activation');
                    }
                });
            }
        }

        function reprendreActivation(activationId) {
            if (confirm('Êtes-vous sûr de vouloir reprendre cette activation ?')) {
                $.ajax({
                    url: '@Url.Action("ReprendreActivation", "AgentTerrain")',
                    type: 'POST',
                    data: { 
                        activationId: activationId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            showToast('success', response.message);
                            setTimeout(function() {
                                location.reload();
                            }, 1500);
                        } else {
                            showToast('error', response.message);
                        }
                    },
                    error: function() {
                        showToast('error', 'Erreur lors de la reprise de l\'activation');
                    }
                });
            }
        }

        function showToast(type, message) {
            const toastClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const iconClass = type === 'success' ? 'fas fa-check-circle' : 'fas fa-times-circle';
            
            const toast = $(`
                <div class="alert ${toastClass} alert-dismissible fade show toast" 
                     style="border-radius: 15px; margin-bottom: 10px;">
                    <i class="${iconClass}"></i> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `);
            
            $('.toast-container').append(toast);
            
            setTimeout(function() {
                toast.alert('close');
            }, 5000);
        }
    </script>
</body>
</html>

@functions {
    public string GetStatusBadgeClass(DiversityPub.Models.enums.StatutActivation statut)
    {
        return statut switch
        {
            DiversityPub.Models.enums.StatutActivation.Planifiee => "bg-primary",
            DiversityPub.Models.enums.StatutActivation.EnCours => "bg-success",
            DiversityPub.Models.enums.StatutActivation.Suspendue => "bg-warning",
            DiversityPub.Models.enums.StatutActivation.Terminee => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    public string GetStatusText(DiversityPub.Models.enums.StatutActivation statut)
    {
        return statut switch
        {
            DiversityPub.Models.enums.StatutActivation.Planifiee => "Planifiée",
            DiversityPub.Models.enums.StatutActivation.EnCours => "En Cours",
            DiversityPub.Models.enums.StatutActivation.Suspendue => "Suspendue",
            DiversityPub.Models.enums.StatutActivation.Terminee => "Terminée",
            _ => "Inconnu"
        };
    }
} 