@model DiversityPub.Models.Media
@{
    Layout = "_AgentLayout";
    ViewData["Title"] = "Envoyer une Preuve";
    var agent = ViewBag.Agent as DiversityPub.Models.AgentTerrain;
    var activations = ViewBag.Activations as List<DiversityPub.Models.Activation>;
    var activationId = ViewBag.ActivationId as Guid?;
}

<style>
    /* Override du layout pour cette page sp√©cifique */
    .header {
        background: linear-gradient(135deg, #A32D18 0%, #EDAC00 100%) !important;
    }
    
    .nav-footer {
        background: linear-gradient(135deg, #A32D18 0%, #EDAC00 100%) !important;
    }
    
    .nav-btn {
        background: rgba(255,255,255,0.2) !important;
        border: 1px solid rgba(255,255,255,0.3) !important;
    }
    
    .nav-btn:hover {
        background: rgba(255,255,255,0.3) !important;
    }
    
    .nav-btn.active {
        background: rgba(255,255,255,0.4) !important;
    }
    
    /* Header personnalis√© pour cette page */
    .page-header {
        background: linear-gradient(135deg, #A32D18 0%, #EDAC00 100%);
        color: white;
        padding: 2rem 1.5rem;
        margin: -1.5rem -1.5rem 2rem -1.5rem;
        border-radius: 0 0 20px 20px;
    }
    
    .page-header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .page-title-section {
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    
    .page-icon {
        font-size: 2.5rem;
        color: white;
    }
    
    .page-title {
        color: white;
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
    }
    
    .page-subtitle {
        color: rgba(255,255,255,0.9);
        font-size: 1.1rem;
        margin: 0;
    }
    
    .header-buttons {
        display: flex;
        gap: 1rem;
    }
    
    .header-btn {
        background: rgba(255,255,255,0.2);
        border: 1px solid rgba(255,255,255,0.3);
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .header-btn:hover {
        background: rgba(255,255,255,0.3);
        color: white;
        transform: translateY(-1px);
    }
    
    /* Formulaire */
    .form-container {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        margin-bottom: 2rem;
    }
    
    .form-title {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1.5rem;
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 2rem;
    }
    
    .form-title i {
        color: #17a2b8;
    }
    
    .form-group {
        margin-bottom: 1.5rem;
    }
    
    .form-label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }
    
    .form-label.required::after {
        content: " *";
        color: #dc3545;
    }
    
    .form-control, .form-select {
        border-radius: 8px;
        border: 2px solid #e9ecef;
        padding: 0.75rem 1rem;
        transition: all 0.3s ease;
        font-size: 1rem;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #A32D18;
        box-shadow: 0 0 0 0.2rem rgba(163, 45, 24, 0.25);
        outline: none;
    }
    
    .form-control::placeholder {
        color: #adb5bd;
    }
    
    .file-upload-area {
        border: 2px dashed #dee2e6;
        border-radius: 12px;
        padding: 2rem;
        text-align: center;
        transition: all 0.3s ease;
        background: rgba(255,255,255,0.5);
        margin-bottom: 1rem;
    }
    
    .file-upload-area:hover {
        border-color: #A32D18;
        background: rgba(163, 45, 24, 0.05);
    }
    
    .file-upload-area.dragover {
        border-color: #A32D18;
        background: rgba(163, 45, 24, 0.1);
    }
    
    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid #e9ecef;
    }
    
    .btn-cancel {
        background: white;
        border: 2px solid #6c757d;
        color: #6c757d;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .btn-cancel:hover {
        background: #6c757d;
        color: white;
        transform: translateY(-1px);
    }
    
    .btn-submit {
        background: #17a2b8;
        border: none;
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .btn-submit:hover {
        background: #138496;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(23, 162, 184, 0.3);
    }
    
    /* Responsive */
    @@media (max-width: 768px) {
        .page-header-content {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }
        
        .header-buttons {
            flex-direction: column;
            width: 100%;
        }
        
        .form-actions {
            flex-direction: column;
        }
        
        .btn-cancel, .btn-submit {
            width: 100%;
            justify-content: center;
        }
        
        .upload-options .btn {
            width: 100%;
            margin-bottom: 0.5rem;
        }
        
        .upload-options .btn:last-child {
            margin-bottom: 0;
        }
        
        /* Style sp√©cial pour le bouton cam√©ra */
        #cameraButton {
            transition: all 0.3s ease;
        }
        
        #cameraButton:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        }
        
        .camera-info {
            background: rgba(23, 162, 184, 0.1);
            border: 1px solid rgba(23, 162, 184, 0.2);
            border-radius: 8px;
            padding: 0.75rem;
        }
    }
</style>

<!-- Header personnalis√© -->
<div class="page-header">
    <div class="page-header-content">
        <div class="page-title-section">
            <i class="fas fa-upload page-icon"></i>
            <div>
                <h1 class="page-title">Envoyer une Preuve</h1>
                <p class="page-subtitle">@(agent?.Utilisateur != null ? $"{agent.Utilisateur.Prenom} {agent.Utilisateur.Nom}" : "Agent")</p>
            </div>
        </div>
        <div class="header-buttons">
            <a href="javascript:history.back()" class="header-btn">
                <i class="fas fa-arrow-left"></i>
                ‚Üê Retour
            </a>
            <a href="@Url.Action("Preuves", "AgentTerrain")" class="header-btn">
                <i class="fas fa-list"></i>
                Mes Preuves
            </a>
        </div>
    </div>
</div>

<!-- Formulaire -->
<div class="form-container">
    <div class="form-title">
        <i class="fas fa-upload"></i>
        üì§ Nouvelle Preuve
    </div>

    <!-- Messages d'erreur -->
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            <h6><i class="fas fa-exclamation-triangle"></i> Erreurs de validation :</h6>
            <ul class="mb-0">
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <li>@error.ErrorMessage</li>
                }
            </ul>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-circle"></i> @TempData["Error"]
        </div>
    }

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">
            <i class="fas fa-check-circle"></i> @TempData["Success"]
        </div>
    }
    
    <form method="post" enctype="multipart/form-data">
        @Html.AntiForgeryToken()
        
        <div class="form-group">
            <label class="form-label required">
                <i class="fas fa-align-left" style="color: #007bff;"></i>
                Description de la preuve
            </label>
            <input type="text" class="form-control" name="Description" value="@Model?.Description" placeholder="Ex: Photo du site d'intervention" required>
        </div>
        
        <div class="form-group">
            <label class="form-label required">
                <i class="fas fa-file" style="color: #28a745;"></i>
                Type de m√©dia
            </label>
            <select class="form-select" name="Type" required>
                <option value="">S√©lectionner un type</option>
                @if (Model?.Type.ToString() == "Photo")
                {
                    <option value="Photo" selected>Photo</option>
                }
                else
                {
                    <option value="Photo">Photo</option>
                }
                @if (Model?.Type.ToString() == "Video")
                {
                    <option value="Video" selected>Vid√©o</option>
                }
                else
                {
                    <option value="Video">Vid√©o</option>
                }
                @if (Model?.Type.ToString() == "Document")
                {
                    <option value="Document" selected>Document</option>
                }
                else
                {
                    <option value="Document">Document</option>
                }
            </select>
        </div>
        
        <div class="form-group">
            <label class="form-label required">
                <i class="fas fa-file-upload" style="color: #ffc107;"></i>
                Fichier
            </label>
            <div class="file-upload-area" id="fileUploadArea">
                <i class="fas fa-cloud-upload-alt fa-3x text-muted mb-3"></i>
                <h6>Glissez-d√©posez vos fichiers ici</h6>
                <p class="text-muted">ou choisissez une option ci-dessous</p>
                <div class="upload-options mt-3">
                    <button type="button" class="btn btn-outline-primary me-2" onclick="document.getElementById('fichier').click()">
                        <i class="fas fa-folder-open"></i> Choisir des fichiers
                    </button>
                    <button type="button" class="btn btn-outline-success" id="cameraButton" onclick="openCamera()">
                        <i class="fas fa-camera"></i> Prendre une photo
                </button>
                </div>
                <div class="camera-info mt-2" id="cameraInfo" style="display: none;">
                    <small class="text-info">
                        <i class="fas fa-info-circle"></i>
                        Appuyez sur "Prendre une photo" pour utiliser votre appareil photo
                    </small>
                </div>
                <div class="camera-help mt-2" id="cameraHelp" style="display: none;">
                    <div class="alert alert-info">
                        <h6><i class="fas fa-lightbulb"></i> Comment prendre une photo :</h6>
                        <ul class="mb-0">
                            <li>Cliquez sur "üì∑ Prendre une photo"</li>
                            <li>Autorisez l'acc√®s √† la cam√©ra si demand√©</li>
                            <li>Cliquez sur "üì∏ Prendre la photo" pour capturer</li>
                            <li>Cliquez sur "‚ùå Fermer" pour annuler</li>
                        </ul>
                    </div>
                </div>
            </div>
            <input type="file" id="fichier" name="fichiers" class="form-control" 
                   accept="image/*,video/*,.pdf,.doc,.docx,.txt" multiple style="display: none;" required />
            <!-- Plusieurs inputs pour maximiser la compatibilit√© cam√©ra -->
            <input type="file" id="fichierCamera" accept="image/*" capture="camera" style="display: none;" />
            <input type="file" id="fichierCameraAlt" accept="image/*" capture style="display: none;" />
            <input type="file" id="fichierCameraEnv" accept="image/*" capture="environment" style="display: none;" />
            <div class="form-text">
                Formats accept√©s : Images (JPG, PNG, GIF), Vid√©os (MP4, AVI), Documents (PDF, DOC, DOCX, TXT)
                <br>Taille maximale : 10 MB
            </div>
        </div>
        
        <div class="form-group">
            <label class="form-label required">
                <i class="fas fa-tasks" style="color: #007bff;"></i>
                Mission concern√©e
            </label>
            <select class="form-select" name="ActivationId" required>
                <option value="">S√©lectionner une mission (obligatoire)</option>
                @if (activations != null)
                {
                    foreach (var activation in activations)
                    {
                        bool isSelected = (activationId.HasValue && activationId.Value == activation.Id) || 
                                        (Model?.ActivationId.HasValue == true && Model.ActivationId.Value == activation.Id);
                        if (isSelected)
                        {
                            <option value="@activation.Id" selected>
                                @activation.Nom (@activation.Campagne?.Nom)
                            </option>
                        }
                        else
                        {
                            <option value="@activation.Id">
                                @activation.Nom (@activation.Campagne?.Nom)
                            </option>
                        }
                    }
                }
            </select>
        </div>
        
        <div class="form-actions">
            <a href="javascript:history.back()" class="btn-cancel">
                <i class="fas fa-times"></i>
                √ó Annuler
            </a>
            <button type="submit" class="btn-submit" onclick="return validateForm()">
                <i class="fas fa-upload"></i>
                üì§ Envoyer la Preuve
            </button>
        </div>
    </form>
</div>

<script>
    // Gestion du drag & drop
    const fileUploadArea = document.getElementById('fileUploadArea');
    const fileInput = document.getElementById('fichier');
    
    fileUploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        fileUploadArea.classList.add('dragover');
    });
    
    fileUploadArea.addEventListener('dragleave', () => {
        fileUploadArea.classList.remove('dragover');
    });
    
    fileUploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        fileUploadArea.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            fileInput.files = files;
            // D√©clencher l'√©v√©nement change manuellement
            fileInput.dispatchEvent(new Event('change'));
        }
    });
    
    // Gestion unifi√©e du changement de fichiers (multiple)
    fileInput.addEventListener('change', function() {
        const files = Array.from(this.files);
        const maxSize = 10 * 1024 * 1024; // 10 MB
        
        console.log('=== FICHIERS S√âLECTIONN√âS ===');
        console.log('Nombre de fichiers:', files.length);
        
        // V√©rifier la taille de chaque fichier
        const validFiles = [];
        const invalidFiles = [];
        
        files.forEach((file, index) => {
            console.log(`Fichier ${index + 1}:`, file.name, `(${file.size} bytes)`);
            if (file.size > maxSize) {
                invalidFiles.push(file.name);
            } else {
                validFiles.push(file);
            }
        });
        
        if (invalidFiles.length > 0) {
            alert(`Les fichiers suivants sont trop volumineux (max 10 MB):\n${invalidFiles.join(', ')}`);
        }
        
        if (validFiles.length > 0) {
            updateMultipleFileDisplay(validFiles);
        } else {
            clearFileDisplay();
        }
    });
    
    function updateFileDisplay(file) {
        let filePreview = '';
        
        // Si c'est une image, afficher une pr√©visualisation
        if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const preview = document.querySelector('.file-preview');
                if (preview) {
                    preview.src = e.target.result;
                }
            };
            reader.readAsDataURL(file);
            
            filePreview = `
                <div class="mb-3">
                    <img class="file-preview img-fluid rounded" style="max-height: 200px; max-width: 100%; object-fit: cover;" />
                </div>
            `;
        }
        
        fileUploadArea.innerHTML = `
            <i class="fas fa-check-circle fa-3x text-success mb-3"></i>
            <h6>Fichier s√©lectionn√©</h6>
            ${filePreview}
            <p class="text-muted">${file.name}</p>
            <small class="text-muted">${(file.size / 1024 / 1024).toFixed(2)} MB</small>
            <div class="mt-3">
                <button type="button" class="btn btn-outline-danger btn-sm me-2" onclick="clearFile(); event.stopPropagation();">
                <i class="fas fa-trash"></i> Supprimer
            </button>
                <button type="button" class="btn btn-outline-success btn-sm" onclick="openCamera(); event.stopPropagation();">
                    <i class="fas fa-camera"></i> Reprendre
                </button>
            </div>
        `;
        
        // Si c'est une image, charger la pr√©visualisation apr√®s avoir mis √† jour le HTML
        if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const preview = document.querySelector('.file-preview');
                if (preview) {
                    preview.src = e.target.result;
                }
            };
            reader.readAsDataURL(file);
        }
    }
    
    // Nouvelle fonction pour afficher plusieurs fichiers
    function updateMultipleFileDisplay(files) {
        let filesHtml = '';
        let totalSize = 0;
        
        files.forEach((file, index) => {
            totalSize += file.size;
            const isImage = file.type.startsWith('image/');
            const fileId = `file-${index}`;
            
            filesHtml += `
                <div class="selected-file mb-3 p-3 border rounded" data-file-index="${index}">
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="file-info">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-${isImage ? 'image' : file.type.includes('video') ? 'video' : 'file'} me-2 text-primary"></i>
                                <div>
                                    <div class="fw-bold">${file.name}</div>
                                    <small class="text-muted">${(file.size / 1024 / 1024).toFixed(2)} MB</small>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeFile(${index})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                    ${isImage ? `<div class="mt-2"><img id="${fileId}" class="img-thumbnail" style="max-height: 100px; max-width: 150px;"></div>` : ''}
                </div>
            `;
        });
        
        fileUploadArea.innerHTML = `
            <div class="text-center mb-3">
                <i class="fas fa-check-circle fa-2x text-success mb-2"></i>
                <h6>${files.length} fichier${files.length > 1 ? 's' : ''} s√©lectionn√©${files.length > 1 ? 's' : ''}</h6>
                <small class="text-muted">Taille totale: ${(totalSize / 1024 / 1024).toFixed(2)} MB</small>
            </div>
            
            <div class="selected-files">
                ${filesHtml}
            </div>
            
            <div class="upload-actions mt-3">
                <button type="button" class="btn btn-outline-primary me-2" onclick="document.getElementById('fichier').click()">
                    <i class="fas fa-plus"></i> Ajouter des fichiers
                </button>
                <button type="button" class="btn btn-outline-success me-2" onclick="openCamera()">
                    <i class="fas fa-camera"></i> Prendre une photo
                </button>
                <button type="button" class="btn btn-outline-danger" onclick="clearAllFiles()">
                    <i class="fas fa-trash"></i> Tout supprimer
                </button>
            </div>
        `;
        
        // Charger les pr√©visualisations d'images
        files.forEach((file, index) => {
            if (file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.getElementById(`file-${index}`);
                    if (preview) {
                        preview.src = e.target.result;
                    }
                };
                reader.readAsDataURL(file);
            }
        });
    }
    
    // Fonction pour supprimer un fichier sp√©cifique
    function removeFile(index) {
        const fileInput = document.getElementById('fichier');
        const files = Array.from(fileInput.files);
        
        // Retirer le fichier de la liste
        files.splice(index, 1);
        
        // Recr√©er l'objet FileList
        const dataTransfer = new DataTransfer();
        files.forEach(file => dataTransfer.items.add(file));
        fileInput.files = dataTransfer.files;
        
        // Mettre √† jour l'affichage
        if (files.length > 0) {
            updateMultipleFileDisplay(files);
        } else {
            clearFileDisplay();
        }
    }
    
    // Fonction pour supprimer tous les fichiers
    function clearAllFiles() {
        const fileInput = document.getElementById('fichier');
        fileInput.value = '';
        clearFileDisplay();
    }
    
    function clearFile() {
        fileInput.value = '';
        clearFileDisplay();
    }
    
    function clearFileDisplay() {
        fileUploadArea.innerHTML = `
            <i class="fas fa-cloud-upload-alt fa-3x text-muted mb-3"></i>
            <h6>Glissez-d√©posez votre fichier ici</h6>
            <p class="text-muted">ou choisissez une option ci-dessous</p>
            <div class="upload-options mt-3">
                <button type="button" class="btn btn-outline-primary me-2" onclick="document.getElementById('fichier').click()">
                <i class="fas fa-folder-open"></i> Choisir un fichier
            </button>
                <button type="button" class="btn btn-outline-success" onclick="openCamera()">
                    <i class="fas fa-camera"></i> Prendre une photo
                </button>
            </div>
        `;
    }
    
    // Fonction pour ouvrir la cam√©ra avec diff√©rentes approches
    function openCamera() {
        console.log('üé• Tentative d\'ouverture de la cam√©ra...');
        
        // D√©tecter le type d'appareil
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
        const isAndroid = /Android/.test(navigator.userAgent);
        
        console.log('üì± D√©tection appareil:', { isMobile, isIOS, isAndroid });
        
        // Essayer d'abord l'API MediaDevices moderne
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            console.log('üìπ Tentative avec MediaDevices API...');
            openCameraWithMediaDevices();
            return;
        }
        
        // Fallback vers les inputs file avec capture
        let cameraInput;
        
        // Choisir le bon input selon la plateforme
        if (isIOS) {
            console.log('üì± iOS d√©tect√© - Utilisation de capture standard');
            cameraInput = document.getElementById('fichierCameraAlt');
        } else if (isAndroid) {
            console.log('ü§ñ Android d√©tect√© - Utilisation de capture environment');
            cameraInput = document.getElementById('fichierCameraEnv');
        } else {
            console.log('üñ•Ô∏è Desktop/Autre - Utilisation de capture camera');
            cameraInput = document.getElementById('fichierCamera');
        }
        
        // Fallback si l'input n'existe pas
        if (!cameraInput) {
            cameraInput = document.getElementById('fichierCamera');
        }
        
        if (cameraInput) {
            console.log('üì∑ Ouverture input cam√©ra:', cameraInput.id);
            cameraInput.click();
        } else {
            console.error('‚ùå Aucun input cam√©ra trouv√©');
            alert('Impossible d\'acc√©der √† la cam√©ra. Veuillez s√©lectionner un fichier manuellement.');
        }
    }
    
    // Nouvelle fonction pour utiliser l'API MediaDevices
    function openCameraWithMediaDevices() {
        const video = document.createElement('video');
        video.style.position = 'fixed';
        video.style.top = '0';
        video.style.left = '0';
        video.style.width = '100%';
        video.style.height = '100%';
        video.style.zIndex = '9999';
        video.style.backgroundColor = 'black';
        video.autoplay = true;
        video.muted = true;
        
        const canvas = document.createElement('canvas');
        const captureButton = document.createElement('button');
        captureButton.textContent = 'üì∏ Prendre la photo';
        captureButton.style.position = 'fixed';
        captureButton.style.bottom = '20px';
        captureButton.style.left = '50%';
        captureButton.style.transform = 'translateX(-50%)';
        captureButton.style.zIndex = '10000';
        captureButton.style.padding = '15px 30px';
        captureButton.style.fontSize = '18px';
        captureButton.style.backgroundColor = '#28a745';
        captureButton.style.color = 'white';
        captureButton.style.border = 'none';
        captureButton.style.borderRadius = '8px';
        captureButton.style.cursor = 'pointer';
        
        const closeButton = document.createElement('button');
        closeButton.textContent = '‚ùå Fermer';
        closeButton.style.position = 'fixed';
        closeButton.style.top = '20px';
        closeButton.style.right = '20px';
        closeButton.style.zIndex = '10000';
        closeButton.style.padding = '10px 20px';
        closeButton.style.backgroundColor = '#dc3545';
        closeButton.style.color = 'white';
        closeButton.style.border = 'none';
        closeButton.style.borderRadius = '8px';
        closeButton.style.cursor = 'pointer';
        
        document.body.appendChild(video);
        document.body.appendChild(captureButton);
        document.body.appendChild(closeButton);
        
        // D√©marrer la cam√©ra
        navigator.mediaDevices.getUserMedia({ 
            video: { 
                facingMode: 'environment', // Cam√©ra arri√®re sur mobile
                width: { ideal: 1920 },
                height: { ideal: 1080 }
            } 
        })
        .then(stream => {
            video.srcObject = stream;
            console.log('üìπ Cam√©ra d√©marr√©e avec succ√®s');
        })
        .catch(err => {
            console.error('‚ùå Erreur cam√©ra:', err);
            alert('Impossible d\'acc√©der √† la cam√©ra. Erreur: ' + err.message);
            closeCamera();
        });
        
        // Prendre la photo
        captureButton.onclick = () => {
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(video, 0, 0);
            
            canvas.toBlob(blob => {
                const file = new File([blob], `photo_${Date.now()}.jpg`, { type: 'image/jpeg' });
                handleCameraPhoto(file, 'mediaDevices');
                closeCamera();
            }, 'image/jpeg', 0.8);
        };
        
        // Fermer la cam√©ra
        closeButton.onclick = closeCamera;
        
        function closeCamera() {
            if (video.srcObject) {
                video.srcObject.getTracks().forEach(track => track.stop());
            }
            document.body.removeChild(video);
            document.body.removeChild(captureButton);
            document.body.removeChild(closeButton);
        }
    }
    
    // D√©tecter si l'appareil a une cam√©ra et ajuster l'interface
    function checkCameraSupport() {
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        const hasMediaDevices = navigator.mediaDevices && navigator.mediaDevices.getUserMedia;
        const cameraButton = document.getElementById('cameraButton');
        const cameraInfo = document.getElementById('cameraInfo');
        
        console.log('üîç V√©rification support cam√©ra:', { isMobile, hasMediaDevices });
        
        if (hasMediaDevices) {
            // V√©rifier si l'appareil a une cam√©ra
            navigator.mediaDevices.enumerateDevices()
                .then(devices => {
                    const hasCamera = devices.some(device => device.kind === 'videoinput');
                    console.log('üìπ Appareils vid√©o d√©tect√©s:', devices.filter(d => d.kind === 'videoinput').length);
                    
                    if (hasCamera) {
                        // Support cam√©ra complet
                        if (cameraButton) {
                            cameraButton.classList.remove('btn-outline-success');
                            cameraButton.classList.add('btn-success');
                            cameraButton.innerHTML = '<i class="fas fa-camera"></i> üì∑ Prendre une photo';
                            cameraButton.onclick = openCamera;
                        }
                        if (cameraInfo) {
                            cameraInfo.style.display = 'block';
                            cameraInfo.innerHTML = '<small class="text-success"><i class="fas fa-check-circle"></i> Cam√©ra disponible - Cliquez pour prendre une photo</small>';
                        }
                        // Afficher l'aide pour la premi√®re fois
                        const cameraHelp = document.getElementById('cameraHelp');
                        if (cameraHelp && !localStorage.getItem('cameraHelpShown')) {
                            cameraHelp.style.display = 'block';
                            localStorage.setItem('cameraHelpShown', 'true');
                        }
                        console.log('‚úÖ Support cam√©ra complet d√©tect√©');
                    } else {
                        // Pas de cam√©ra d√©tect√©e
                        if (cameraButton) {
                            cameraButton.classList.add('btn-outline-warning');
                            cameraButton.classList.remove('btn-outline-success');
                            cameraButton.innerHTML = '<i class="fas fa-camera"></i> Pas de cam√©ra';
                            cameraButton.title = 'Aucune cam√©ra d√©tect√©e';
                            cameraButton.disabled = true;
                        }
                        console.log('‚ùå Aucune cam√©ra d√©tect√©e');
                    }
                })
                .catch(err => {
                    console.error('‚ùå Erreur lors de la d√©tection des appareils:', err);
                    // Fallback vers le comportement de base
                    if (cameraButton) {
                        cameraButton.innerHTML = '<i class="fas fa-camera"></i> Appareil photo';
                        cameraButton.title = 'Utilise l\'appareil photo de votre appareil';
                    }
                });
        } else {
            // Pas de support MediaDevices
            if (cameraButton) {
                cameraButton.classList.add('btn-outline-secondary');
                cameraButton.classList.remove('btn-outline-success');
                cameraButton.innerHTML = '<i class="fas fa-camera"></i> S√©lectionner fichier';
                cameraButton.title = 'S√©lectionnez un fichier photo';
                cameraButton.onclick = () => document.getElementById('fichier').click();
            }
            console.log('‚ÑπÔ∏è Pas de support MediaDevices - Fallback vers s√©lection fichier');
        }
    }
    
    // Fonction g√©n√©rique pour g√©rer la prise de photo
    function handleCameraPhoto(file, inputId) {
        console.log(`=== PHOTO PRISE AVEC ${inputId.toUpperCase()} ===`);
        console.log('File:', file);
        console.log('Name:', file.name);
        console.log('Size:', file.size);
        console.log('Type:', file.type);
        
        // Transf√©rer le fichier vers l'input principal
        const mainInput = document.getElementById('fichier');
        
        // Si il y a d√©j√† des fichiers, les garder et ajouter la nouvelle photo
        const existingFiles = Array.from(mainInput.files || []);
        existingFiles.push(file);
        
        const dataTransfer = new DataTransfer();
        existingFiles.forEach(f => dataTransfer.items.add(f));
        mainInput.files = dataTransfer.files;
        
        // Mettre √† jour l'affichage selon le nombre de fichiers
        if (existingFiles.length === 1) {
            updateFileDisplay(file);
        } else {
            updateMultipleFileDisplay(existingFiles);
        }
        
        // D√©clencher l'√©v√©nement change sur l'input principal
        mainInput.dispatchEvent(new Event('change'));
        
        // Message de confirmation
        console.log('üì∑ Photo ajout√©e avec succ√®s !');
        
        // Petit feedback visuel
        showCameraFeedback();
    }
    
    // Fonction pour afficher un feedback visuel
    function showCameraFeedback() {
        const cameraButton = document.getElementById('cameraButton');
        if (cameraButton) {
            const originalText = cameraButton.innerHTML;
            cameraButton.innerHTML = '<i class="fas fa-check"></i> Photo prise !';
            cameraButton.classList.add('btn-success');
            cameraButton.classList.remove('btn-outline-success');
            
            setTimeout(() => {
                cameraButton.innerHTML = originalText;
                cameraButton.classList.remove('btn-success');
                cameraButton.classList.add('btn-outline-success');
            }, 2000);
        }
    }
    
    // Event listeners pour tous les inputs cam√©ra
    ['fichierCamera', 'fichierCameraAlt', 'fichierCameraEnv'].forEach(inputId => {
        const input = document.getElementById(inputId);
        if (input) {
            input.addEventListener('change', function() {
                const file = this.files[0];
                if (file) {
                    handleCameraPhoto(file, inputId);
                }
            });
        }
    });
    
    // Validation du formulaire avant envoi
    function validateForm() {
        const description = document.querySelector('input[name="Description"]').value;
        const type = document.querySelector('select[name="Type"]').value;
        const fichier = document.getElementById('fichier').files[0];
        const activationId = document.querySelector('select[name="ActivationId"]').value;
        
        console.log('Validation du formulaire:');
        console.log('- Description:', description);
        console.log('- Type:', type);
        console.log('- Fichier:', fichier ? fichier.name : 'Aucun fichier');
        console.log('- ActivationId:', activationId);
        
        if (!description || !type || !fichier || !activationId) {
            alert('Veuillez remplir tous les champs obligatoires.');
            return false;
        }
        
        console.log('Formulaire valide, envoi en cours...');
        return true;
    }
    
    // Debug: Afficher les donn√©es du formulaire lors de la soumission
    document.querySelector('form').addEventListener('submit', function(e) {
        console.log('=== SOUMISSION FORMULAIRE ===');
        const formData = new FormData(this);
        console.log('Donn√©es du formulaire:');
        for (let [key, value] of formData.entries()) {
            if (value instanceof File) {
                console.log(`${key}: [File] ${value.name} (${value.size} bytes)`);
            } else {
                console.log(`${key}: ${value}`);
            }
        }
        
        // Validation finale c√¥t√© client
        const description = formData.get('Description');
        const type = formData.get('Type');
        const activationId = formData.get('ActivationId');
        const fichier = formData.get('fichier');
        
        console.log('=== VALIDATION FINALE ===');
        console.log('Description OK:', !!description);
        console.log('Type OK:', !!type);
        console.log('ActivationId OK:', !!activationId);
        console.log('Fichier OK:', !!(fichier && fichier.size > 0));
        console.log('Fichier d√©tails:', fichier);
        
        // V√©rification suppl√©mentaire directe de l'input
        const fileInputElement = document.getElementById('fichier');
        console.log('Input file direct:', fileInputElement.files[0]);
        
        if (!description || !type || !activationId) {
            console.error('‚ùå Validation √©chou√©e c√¥t√© client - champs obligatoires manquants');
            alert('La description, le type et la mission sont obligatoires.');
            e.preventDefault();
            return false;
        }
        
        // Log pour d√©bogage, mais ne pas bloquer si fichier absent (laisser le serveur g√©rer)
        if (!fichier || fichier.size === 0) {
            console.warn('‚ö†Ô∏è Fichier non d√©tect√© c√¥t√© client, mais envoi au serveur pour validation');
        }
        
        console.log('‚úÖ Validation c√¥t√© client r√©ussie, envoi en cours...');
    });
    
    // Fonction de diagnostic cam√©ra
    function diagnoseCameraSupport() {
        console.log('=== DIAGNOSTIC CAM√âRA ===');
        console.log('User Agent:', navigator.userAgent);
        console.log('Has MediaDevices:', !!(navigator.mediaDevices));
        console.log('Has getUserMedia:', !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia));
        console.log('Is Mobile:', /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));
        console.log('Is iOS:', /iPad|iPhone|iPod/.test(navigator.userAgent));
        console.log('Is Android:', /Android/.test(navigator.userAgent));
        console.log('Protocol:', window.location.protocol);
        
        // V√©rifier si tous les inputs existent
        ['fichierCamera', 'fichierCameraAlt', 'fichierCameraEnv'].forEach(id => {
            const input = document.getElementById(id);
            console.log(`Input ${id}:`, !!input);
            if (input) {
                console.log(`  - accept: ${input.accept}`);
                console.log(`  - capture: ${input.capture}`);
            }
        });
    }
    
    // Initialiser la d√©tection de cam√©ra au chargement de la page
    document.addEventListener('DOMContentLoaded', function() {
        checkCameraSupport();
        diagnoseCameraSupport();
        
        // Ajouter un message d'aide
        if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost') {
            console.warn('‚ö†Ô∏è La capture cam√©ra n√©cessite HTTPS ou localhost pour fonctionner correctement');
        }
    });
</script> 