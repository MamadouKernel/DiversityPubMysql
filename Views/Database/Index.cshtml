@{
    ViewData["Title"] = "Administration Base de Données";
    var dbStats = ViewBag.DbStats as dynamic;
    var backupHistory = ViewBag.BackupHistory as List<dynamic>;
    var connectionString = ViewBag.ConnectionString as string;
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h4 class="mb-0">
                    <i class="fas fa-database"></i> Administration Base de Données
                </h4>
            </div>
            <div class="card-body">
                <!-- Messages d'alerte -->
    @if (TempData["Success"] != null)
    {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["Error"] != null)
    {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

                <!-- Statistiques de la base de données -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h5><i class="fas fa-chart-bar"></i> Statistiques de la Base de Données</h5>
                    </div>
                </div>
                <div class="row mb-4">
                    <div class="col-md-2 col-sm-4 mb-3">
                        <div class="card stats-card bg-primary text-white h-100">
                            <div class="card-body text-center">
                                <h4 class="mb-0">@dbStats.TotalCampagnes</h4>
                                <small>Campagnes</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2 col-sm-4 mb-3">
                        <div class="card stats-card bg-success text-white h-100">
                            <div class="card-body text-center">
                                <h4 class="mb-0">@dbStats.TotalActivations</h4>
                                <small>Activations</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2 col-sm-4 mb-3">
                        <div class="card stats-card bg-info text-white h-100">
                            <div class="card-body text-center">
                                <h4 class="mb-0">@dbStats.TotalClients</h4>
                                <small>Clients</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2 col-sm-4 mb-3">
                        <div class="card stats-card bg-warning text-white h-100">
                            <div class="card-body text-center">
                                <h4 class="mb-0">@dbStats.TotalUtilisateurs</h4>
                                <small>Utilisateurs</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2 col-sm-4 mb-3">
                        <div class="card stats-card bg-secondary text-white h-100">
                            <div class="card-body text-center">
                                <h4 class="mb-0">@dbStats.TotalAgentsTerrain</h4>
                                <small>Agents Terrain</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2 col-sm-4 mb-3">
                        <div class="card stats-card bg-dark text-white h-100">
                            <div class="card-body text-center">
                                <h4 class="mb-0">@dbStats.TotalMedias</h4>
                                <small>Médias</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Détails des statistiques -->
    <div class="row mb-4">
        <div class="col-md-4">
                        <div class="card">
                <div class="card-header">
                                <h6 class="mb-0">Activations par Statut</h6>
                </div>
                <div class="card-body">
                                @foreach (var stat in dbStats.ActivationsParStatut)
                                {
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>@stat.Statut</span>
                                        <span class="badge bg-primary">@stat.Count</span>
                                    </div>
                                }
                </div>
            </div>
        </div>
        <div class="col-md-4">
                        <div class="card">
                <div class="card-header">
                                <h6 class="mb-0">Campagnes par Statut</h6>
                </div>
                <div class="card-body">
                                @foreach (var stat in dbStats.CampagnesParStatut)
                                {
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>@stat.Statut</span>
                                        <span class="badge bg-success">@stat.Count</span>
                                    </div>
                                }
                </div>
            </div>
        </div>
        <div class="col-md-4">
                        <div class="card">
                <div class="card-header">
                                <h6 class="mb-0">Médias par Type</h6>
                </div>
                <div class="card-body">
                                @foreach (var stat in dbStats.MediasParType)
                                {
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>@stat.Type</span>
                                        <span class="badge bg-info">@stat.Count</span>
                                    </div>
                                }
                </div>
            </div>
        </div>
    </div>

                <!-- Gestion des sauvegardes -->
    <div class="row mb-4">
                    <div class="col-12">
                        <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0"><i class="fas fa-save"></i> Gestion des Sauvegardes</h5>
                                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#backupModal">
                                    <i class="fas fa-plus"></i> Nouvelle Sauvegarde
                                </button>
                </div>
                <div class="card-body">
                                @if (backupHistory != null && backupHistory.Any())
                                {
                                    <div class="table-responsive">
                                        <table class="table table-striped">
                                            <thead>
                                                <tr>
                                                    <th>Fichier</th>
                                                    <th>Date</th>
                                                    <th>Taille</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var backup in backupHistory)
                                                {
                                                    <tr>
                                                        <td>@backup.FileName</td>
                                                        <td>@backup.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                                        <td>@FormatFileSize(backup.FileSize)</td>
                                                        <td>
                                                            <button class="btn btn-sm btn-success" onclick="restoreBackup('@backup.FileName')">
                                                                <i class="fas fa-undo"></i> Restaurer
                                                            </button>
                                                            <button class="btn btn-sm btn-danger" onclick="deleteBackup('@backup.FileName')">
                                                                <i class="fas fa-trash"></i> Supprimer
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-info">
                                        <i class="fas fa-info-circle"></i> Aucune sauvegarde trouvée.
                                    </div>
                                }
                </div>
            </div>
        </div>
    </div>

                <!-- Gestion des tables -->
        <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="card">
                    <div class="card-header">
                                <h5 class="mb-0"><i class="fas fa-table"></i> Vider une Table</h5>
                    </div>
                    <div class="card-body">
                                <form id="truncateForm">
                                    <div class="mb-3">
                                        <label for="tableName" class="form-label">Sélectionner une table :</label>
                                        <select class="form-select" id="tableName" name="tableName" required>
                                            <option value="">Choisir une table...</option>
                                            <option value="Medias">Medias</option>
                                            <option value="Incidents">Incidents</option>
                                            <option value="Feedbacks">Feedbacks</option>
                                            <option value="Activations">Activations</option>
                                            <option value="Campagnes">Campagnes</option>
                                            <option value="Clients">Clients</option>
                                            <option value="Utilisateurs">Utilisateurs</option>
                                            <option value="AgentsTerrain">AgentsTerrain</option>
                                            <option value="Lieux">Lieux</option>
                                        </select>
                                    </div>
                                    <button type="submit" class="btn btn-warning" id="truncateBtn">
                                        <i class="fas fa-trash"></i> Vider la Table
                                    </button>
                                </form>
                                    </div>
                                    </div>
                                </div>
                    <div class="col-md-6">
                        <div class="card">
                    <div class="card-header">
                                <h5 class="mb-0"><i class="fas fa-bomb"></i> Vidage Général</h5>
                    </div>
                    <div class="card-body">
                                <div class="alert alert-danger">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    <strong>Attention !</strong> Cette action va supprimer TOUTES les données de TOUTES les tables.
                                </div>
                                <p class="text-muted small mb-3">
                                    Tables concernées : Medias, PositionGPS, Incidents, Feedbacks, Activations, 
                                    AgentsTerrain, Lieux, Campagnes, Clients, Utilisateurs
                                </p>
                                <form asp-action="TruncateAllTables" method="post" style="display: inline;">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-danger w-100" 
                                            onclick="return confirm('⚠️ ATTENTION ! Cette action est IRREVERSIBLE !\n\nÊtes-vous ABSOLUMENT sûr de vouloir supprimer TOUTES les données de TOUTES les tables ?\n\nCette action ne peut pas être annulée !')">
                                        <i class="fas fa-bomb"></i> Vider TOUTES les Tables
                                    </button>
                                </form>
                                    </div>
                                    </div>
                                </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0"><i class="fas fa-code"></i> Requête SQL</h5>
                                </div>
                            <div class="card-body">
                                <form id="queryForm">
                                    <div class="mb-3">
                                        <label for="sqlQuery" class="form-label">Requête SQL (SELECT uniquement) :</label>
                                        <textarea class="form-control" id="sqlQuery" name="sqlQuery" rows="3" 
                                                  placeholder="SELECT * FROM Campagnes LIMIT 10;" required></textarea>
                            </div>
                                    <button type="submit" class="btn btn-info" id="queryBtn">
                                        <i class="fas fa-play"></i> Exécuter
                                    </button>
                                </form>
                                <div id="queryResult" class="mt-3" style="display: none;">
                                    <div class="alert alert-info">
                                        <h6>Résultat :</h6>
                                        <pre id="queryResultText"></pre>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

                <!-- Gestion des utilisateurs -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-user-plus"></i> Créer un Utilisateur</h5>
                </div>
                <div class="card-body">
                    <form asp-action="CreateUser" method="post">
                        @Html.AntiForgeryToken()
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="nom" class="form-label">Nom *</label>
                                <input type="text" class="form-control" id="nom" name="nom" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="prenom" class="form-label">Prénom *</label>
                                <input type="text" class="form-control" id="prenom" name="prenom" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email *</label>
                            <input type="email" class="form-control" id="email" name="email" required>
                        </div>
                        <div class="mb-3">
                            <label for="motDePasse" class="form-label">Mot de passe *</label>
                            <input type="password" class="form-control" id="motDePasse" name="motDePasse" required>
                        </div>
                        <div class="mb-3">
                            <label for="role" class="form-label">Rôle *</label>
                            <select class="form-select" id="role" name="role" required>
                                <option value="">Choisir un rôle...</option>
                                <option value="0">SuperAdmin</option>
                                <option value="1">Admin</option>
                                <option value="2">Manager</option>
                                <option value="3">Agent</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-user-plus"></i> Créer l'Utilisateur
                        </button>
                    </form>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-users"></i> Liste des Utilisateurs</h5>
                </div>
                <div class="card-body">
                    <div id="usersList">
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                            <p class="mt-2">Chargement des utilisateurs...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

                <!-- Informations de connexion -->
    <div class="row">
        <div class="col-12">
                        <div class="card">
                <div class="card-header">
                                <h5 class="mb-0"><i class="fas fa-info-circle"></i> Informations de Connexion</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Chaîne de connexion (mot de passe masqué) :</label>
                                    <input type="text" class="form-control" value="@connectionString" readonly>
                    </div>
                </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal pour nouvelle sauvegarde -->
<div class="modal fade" id="backupModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Nouvelle Sauvegarde</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="Backup" method="post" id="backupForm">
            <div class="modal-body">
                    <div class="mb-3">
                        <label for="commentaire" class="form-label">Commentaire (optionnel) :</label>
                        <textarea class="form-control" id="commentaire" name="commentaire" rows="3" 
                                  placeholder="Description de cette sauvegarde..."></textarea>
                </div>
                    </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="submit" class="btn btn-primary" id="backupBtn">
                        <i class="fas fa-save"></i> Créer la Sauvegarde
                        </button>
                    </div>
                </form>
        </div>
    </div>
</div>

<!-- Modal de progression -->
<div class="modal fade progress-modal" id="progressModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="progressTitle">
                    <i class="fas fa-spinner fa-spin"></i> Traitement en cours...
                </h5>
            </div>
            <div class="modal-body text-center">
                <div class="mb-4">
                    <div class="progress" style="height: 25px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                             id="progressBar" role="progressbar" style="width: 0%" 
                             aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                            <span id="progressText">0%</span>
                        </div>
                    </div>
                </div>
                <div class="mb-3">
                    <div class="spinner-border text-primary" role="status" id="mainSpinner">
                        <span class="visually-hidden">Chargement...</span>
                    </div>
                </div>
                <p class="mb-0" id="progressMessage">Initialisation...</p>
            </div>
        </div>
    </div>
</div>

<!-- Formulaires cachés pour les actions AJAX -->
<form id="restoreForm" asp-action="Restore" method="post" style="display: none;">
    <input type="hidden" id="restoreFileName" name="backupFileName" />
</form>

<form id="deleteForm" asp-action="DeleteBackup" method="post" style="display: none;">
    <input type="hidden" id="deleteFileName" name="fileName" />
</form>

@section Scripts {
    <script>
        // Variables globales pour la progression
        let progressInterval;
        let currentAction = '';
        let progressModal;
        let progressBar;
        let progressText;
        let progressMessage;
        let progressTitle;

        // Initialisation au chargement de la page
        document.addEventListener('DOMContentLoaded', function() {
            progressModal = new bootstrap.Modal(document.getElementById('progressModal'));
            progressBar = document.getElementById('progressBar');
            progressText = document.getElementById('progressText');
            progressMessage = document.getElementById('progressMessage');
            progressTitle = document.getElementById('progressTitle');
        });

        // Fonction pour démarrer la progression
        function startProgress(action, title, initialMessage) {
            currentAction = action;
            progressTitle.innerHTML = `<i class="fas fa-spinner fa-spin"></i> ${title}`;
            progressMessage.textContent = initialMessage || 'Initialisation...';
            progressBar.style.width = '0%';
            progressBar.setAttribute('aria-valuenow', 0);
            progressText.textContent = '0%';
            progressModal.show();

            // Simuler la progression
            let progress = 0;
            progressInterval = setInterval(() => {
                progress += Math.random() * 15 + 5; // Progression aléatoire entre 5-20%
                if (progress > 90) progress = 90; // Ne pas dépasser 90% avant la fin
                
                updateProgress(progress, getProgressMessage(progress));
            }, 500);
        }

        // Fonction pour mettre à jour la progression
        function updateProgress(percent, message) {
            progressBar.style.width = percent + '%';
            progressBar.setAttribute('aria-valuenow', percent);
            progressText.textContent = Math.round(percent) + '%';
            if (message) progressMessage.textContent = message;
        }

        // Fonction pour terminer la progression
        function completeProgress(message) {
            clearInterval(progressInterval);
            updateProgress(100, message || 'Terminé !');
            
            setTimeout(() => {
                progressModal.hide();
                setTimeout(() => {
                    location.reload();
                }, 300);
            }, 1000);
        }

        // Fonction pour échouer la progression
        function failProgress(message) {
            clearInterval(progressInterval);
            progressTitle.innerHTML = '<i class="fas fa-exclamation-triangle text-danger"></i> Erreur';
            progressMessage.textContent = message || 'Une erreur est survenue';
            progressBar.className = 'progress-bar bg-danger';
            
            setTimeout(() => {
                progressModal.hide();
                setTimeout(() => {
                    progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated';
                }, 500);
            }, 3000);
        }

        // Messages de progression selon l'action
        function getProgressMessage(percent) {
            const messages = {
                'backup': [
                    'Analyse de la structure de la base...',
                    'Préparation des données...',
                    'Création du fichier de sauvegarde...',
                    'Écriture des données...',
                    'Finalisation de la sauvegarde...'
                ],
                'restore': [
                    'Lecture du fichier de sauvegarde...',
                    'Analyse de la structure...',
                    'Préparation de la restauration...',
                    'Restauration des données...',
                    'Vérification de l\'intégrité...'
                ],
                'truncate': [
                    'Vérification des contraintes...',
                    'Désactivation des clés étrangères...',
                    'Vidage de la table...',
                    'Réactivation des clés étrangères...',
                    'Finalisation...'
                ],
                'truncateAll': [
                    'Préparation du vidage général...',
                    'Désactivation des contraintes...',
                    'Vidage des tables de données...',
                    'Vidage des tables de configuration...',
                    'Vidage des tables principales...',
                    'Réactivation des contraintes...',
                    'Finalisation du nettoyage...'
                ],
                'query': [
                    'Validation de la requête...',
                    'Connexion à la base...',
                    'Exécution de la requête...',
                    'Récupération des résultats...',
                    'Formatage des données...'
                ]
            };

            const actionMessages = messages[currentAction] || messages['query'];
            const index = Math.floor((percent / 100) * actionMessages.length);
            return actionMessages[Math.min(index, actionMessages.length - 1)];
        }

        // Fonction pour formater la taille des fichiers
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Restaurer une sauvegarde avec progression
        function restoreBackup(fileName) {
            if (confirm('⚠️ Êtes-vous sûr de vouloir restaurer cette sauvegarde ? Cela écrasera toutes les données actuelles !')) {
                startProgress('restore', 'Restauration en cours', 'Début de la restauration...');
                
                // Simuler le délai de traitement
                setTimeout(() => {
                    document.getElementById('restoreFileName').value = fileName;
                    document.getElementById('restoreForm').submit();
                }, 2000);
            }
        }

        // Supprimer une sauvegarde
        function deleteBackup(fileName) {
            if (confirm('⚠️ Êtes-vous sûr de vouloir supprimer cette sauvegarde ?')) {
                document.getElementById('deleteFileName').value = fileName;
                document.getElementById('deleteForm').submit();
            }
        }

        // Vider une table avec progression
        document.getElementById('truncateForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const tableName = document.getElementById('tableName').value;
            if (!tableName) {
                alert('❌ Veuillez sélectionner une table');
                return;
            }

            startProgress('truncate', 'Vidage de la table', `Vidage de la table ${tableName}...`);

            fetch('@Url.Action("TruncateTable")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `tableName=${encodeURIComponent(tableName)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    completeProgress('✅ Table vidée avec succès !');
                } else {
                    failProgress('❌ ' + data.message);
                }
            })
            .catch(error => {
                failProgress('❌ Erreur : ' + error.message);
            });
        });



        // Exécuter une requête SQL avec progression
        document.getElementById('queryForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const sqlQuery = document.getElementById('sqlQuery').value;
            if (!sqlQuery) {
                alert('❌ Veuillez saisir une requête SQL');
                return;
            }

            startProgress('query', 'Exécution de la requête', 'Exécution de la requête SQL...');

            fetch('@Url.Action("ExecuteQuery")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `sqlQuery=${encodeURIComponent(sqlQuery)}`
            })
            .then(response => response.json())
            .then(data => {
                const resultDiv = document.getElementById('queryResult');
                const resultText = document.getElementById('queryResultText');
                
                if (data.success) {
                    completeProgress('✅ Requête exécutée avec succès !');
                    setTimeout(() => {
                        resultText.textContent = JSON.stringify(data.data, null, 2);
                        resultDiv.style.display = 'block';
                        resultDiv.querySelector('.alert').className = 'alert alert-success';
                    }, 1500);
                } else {
                    failProgress('❌ ' + data.message);
                }
            })
            .catch(error => {
                failProgress('❌ Erreur : ' + error.message);
            });
        });

        // Créer une sauvegarde avec progression
        document.getElementById('backupForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const commentaire = document.getElementById('commentaire').value;
            startProgress('backup', 'Création de la sauvegarde', 'Début de la sauvegarde...');

            fetch('@Url.Action("Backup")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `commentaire=${encodeURIComponent(commentaire)}`
            })
            .then(response => {
                if (response.redirected) {
                    completeProgress('✅ Sauvegarde créée avec succès !');
                    setTimeout(() => {
                        window.location.href = response.url;
                    }, 1500);
                } else {
                    return response.text();
                }
            })
            .then(data => {
                if (data) {
                    failProgress('❌ Erreur lors de la sauvegarde');
                }
            })
            .catch(error => {
                failProgress('❌ Erreur : ' + error.message);
            });
        });

        // Charger la liste des utilisateurs
        function loadUsers() {
            fetch('@Url.Action("GetUsers")')
                .then(response => response.json())
                .then(data => {
                    const usersList = document.getElementById('usersList');
                    
                    if (data.success && data.data.length > 0) {
                        let html = '<div class="table-responsive"><table class="table table-striped table-sm">';
                        html += '<thead><tr><th>Nom</th><th>Email</th><th>Rôle</th><th>Statut</th></tr></thead><tbody>';
                        
                        data.data.forEach(user => {
                            const roleNames = ['SuperAdmin', 'Admin', 'Manager', 'Agent'];
                            const roleName = roleNames[user.role] || 'Inconnu';
                            const statusBadge = user.supprimer === 0 ? 
                                '<span class="badge bg-success">Actif</span>' : 
                                '<span class="badge bg-danger">Supprimé</span>';
                            
                            html += `<tr>
                                <td>${user.nom} ${user.prenom}</td>
                                <td>${user.email}</td>
                                <td><span class="badge bg-info">${roleName}</span></td>
                                <td>${statusBadge}</td>
                            </tr>`;
                        });
                        
                        html += '</tbody></table></div>';
                        usersList.innerHTML = html;
                    } else {
                        usersList.innerHTML = '<div class="alert alert-info"><i class="fas fa-info-circle"></i> Aucun utilisateur trouvé.</div>';
                    }
                })
                .catch(error => {
                    document.getElementById('usersList').innerHTML = 
                        '<div class="alert alert-danger"><i class="fas fa-exclamation-triangle"></i> Erreur lors du chargement des utilisateurs.</div>';
                });
        }

        // Charger les utilisateurs au chargement de la page
        document.addEventListener('DOMContentLoaded', function() {
            loadUsers();
        });
    </script>
}

@functions {
    public string FormatFileSize(long bytes)
    {
        if (bytes == 0) return "0 Bytes";
        string[] sizes = { "Bytes", "KB", "MB", "GB" };
        int order = 0;
        double len = bytes;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}
