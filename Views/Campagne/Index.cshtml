@model IEnumerable<DiversityPub.Models.Campagne>
@{
    ViewData["Title"] = "Gestion des Campagnes";
}

<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h4 class="mb-0">
                    <i class="fas fa-bullhorn"></i> Gestion des Campagnes
                </h4>
                <a href="@Url.Action("Create", "Campagne")" class="btn btn-primary">
                    <i class="fas fa-plus"></i> Nouvelle Campagne
                </a>
            </div>
            <div class="card-body">
                @if (Model.Any())
                {
                    <!-- Barre de recherche et filtres -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" class="form-control" id="searchInput" placeholder="Rechercher une campagne..." onkeyup="filterTable()">
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="statusFilter" onchange="filterTable()">
                                <option value="">Tous les statuts</option>
                                <option value="EnPreparation">En Préparation</option>
                                <option value="EnCours">En Cours</option>
                                <option value="Terminee">Terminée</option>
                                <option value="Annulee">Annulée</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="clientFilter" onchange="filterTable()">
                                <option value="">Tous les clients</option>
                                @foreach (var client in Model.Select(c => c.Client).Distinct().Where(c => c != null))
                                {
                                    <option value="@client.RaisonSociale">@client.RaisonSociale</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-secondary w-100" onclick="resetFilters()">
                                <i class="fas fa-undo"></i> Réinitialiser
                            </button>
                        </div>
                    </div>

                    <div id="campagnesContainer" class="row">
                        @foreach (var campagne in Model.OrderByDescending(c => c.DateCreation))
                        {
                            <div class="col-md-6 col-lg-4 mb-4" data-nom="@campagne.Nom?.ToLower()" data-statut="@campagne.Statut.ToString()" data-client="@campagne.Client?.RaisonSociale?.ToLower()" data-date="@campagne.DateCreation.ToString("yyyy-MM-dd")">
                                <div class="card h-100">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">@campagne.Nom</h6>
                                        @switch (campagne.Statut)
                                        {
                                            case DiversityPub.Models.enums.StatutCampagne.EnPreparation:
                                                <span class="badge bg-warning">En Préparation</span>
                                                break;
                                            case DiversityPub.Models.enums.StatutCampagne.EnCours:
                                                <span class="badge bg-success">Active</span>
                                                break;
                                            case DiversityPub.Models.enums.StatutCampagne.Terminee:
                                                <span class="badge bg-info">Terminée</span>
                                                break;
                                            case DiversityPub.Models.enums.StatutCampagne.Annulee:
                                                <span class="badge bg-danger">Annulée</span>
                                                break;
                                        }
                                    </div>
                                    <div class="card-body">
                                        @if (!string.IsNullOrEmpty(campagne.Description))
                                        {
                                            <p class="card-text text-muted">@campagne.Description</p>
                                        }
                                        
                                        <div class="row mb-3">
                                            <div class="col-6">
                                                <small class="text-muted">
                                                    <i class="fas fa-calendar"></i> Début
                                                </small>
                                                <br>
                                                <strong>@campagne.DateDebut.ToString("dd/MM/yyyy")</strong>
                                            </div>
                                            <div class="col-6">
                                                <small class="text-muted">
                                                    <i class="fas fa-calendar-check"></i> Fin
                                                </small>
                                                <br>
                                                <strong class="@(campagne.DateFin <= DateTime.Today.AddDays(7) && campagne.Statut != DiversityPub.Models.enums.StatutCampagne.Terminee && campagne.Statut != DiversityPub.Models.enums.StatutCampagne.Annulee ? "text-danger" : "")">
                                                    @campagne.DateFin.ToString("dd/MM/yyyy")
                                                    @if (campagne.DateFin <= DateTime.Today.AddDays(7) && campagne.Statut != DiversityPub.Models.enums.StatutCampagne.Terminee && campagne.Statut != DiversityPub.Models.enums.StatutCampagne.Annulee)
                                                    {
                                                        <i class="fas fa-exclamation-triangle text-warning"></i>
                                                    }
                                                </strong>
                                            </div>
                                        </div>
                                        
                                        @if (campagne.Client != null)
                                        {
                                            <div class="mb-3">
                                                <small class="text-muted">
                                                    <i class="fas fa-building"></i> Client
                                                </small>
                                                <br>
                                                <strong>@(campagne.Client?.RaisonSociale ?? "Client supprimé")</strong>
                                            </div>
                                        }
                                        
                                        @if (campagne.Activations != null && campagne.Activations.Any())
                                        {
                                            <div class="mb-3">
                                                <small class="text-muted">
                                                    <i class="fas fa-map-marker-alt"></i> Activations
                                                </small>
                                                <br>
                                                <span class="badge bg-primary">@campagne.Activations.Count</span>
                                            </div>
                                        }
                                    </div>
                                    <div class="card-footer">
                                        <div class="btn-group w-100" role="group">
                                            <a href="@Url.Action("Details", "Campagne", new { id = campagne.Id })" 
                                               class="btn btn-sm btn-outline-info">
                                                <i class="fas fa-eye"></i> Détails
                                            </a>
                                            <a href="@Url.Action("Edit", "Campagne", new { id = campagne.Id })" 
                                               class="btn btn-sm btn-outline-warning">
                                                <i class="fas fa-edit"></i> Modifier
                                            </a>
                                            <a href="@Url.Action("Delete", "Campagne", new { id = campagne.Id })" 
                                               class="btn btn-sm btn-outline-danger">
                                                <i class="fas fa-trash"></i> Supprimer
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Pagination -->
                    <div class="row mt-4">
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <label class="me-2">Afficher:</label>
                                <select class="form-select form-select-sm" style="width: auto;" id="pageSize" onchange="changePageSize()">
                                    <option value="5" selected>5</option>
                                    <option value="10">10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                    <option value="100">100</option>
                                </select>
                                <span class="ms-2">éléments par page</span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <nav aria-label="Pagination">
                                <ul class="pagination justify-content-end mb-0" id="pagination">
                                    <!-- Généré par JavaScript -->
                                </ul>
                            </nav>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-bullhorn fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">Aucune campagne trouvée</h5>
                        <p class="text-muted">Commencez par créer votre première campagne.</p>
                        <a href="@Url.Action("Create", "Campagne")" class="btn btn-primary">
                            <i class="fas fa-plus"></i> Créer une campagne
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        transition: transform 0.2s, box-shadow 0.2s;
    }
    
    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .pagination .page-link {
        color: #A32D18;
        border-color: #dee2e6;
    }
    
    .pagination .page-item.active .page-link {
        background-color: #A32D18;
        border-color: #A32D18;
    }
    
    .pagination .page-link:hover {
        color: #A32D18;
        background-color: #f8f9fa;
    }
</style>

<script>
    let currentPage = 1;
    let pageSize = 5;
    let allData = [];
    
    // Initialisation
    document.addEventListener('DOMContentLoaded', function() {
        initializeData();
        updatePagination();
    });
    
    function initializeData() {
        const container = document.getElementById('campagnesContainer');
        if (container) {
            const cards = container.querySelectorAll('.col-md-6');
            allData = Array.from(cards).map(card => {
                return {
                    element: card,
                    nom: card.dataset.nom || '',
                    statut: card.dataset.statut || '',
                    client: card.dataset.client || '',
                    date: card.dataset.date || ''
                };
            });
            
            console.log('Données initialisées:', allData.length, 'éléments');
        }
    }
    
    function filterTable() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        const statusFilter = document.getElementById('statusFilter').value;
        const clientFilter = document.getElementById('clientFilter').value;
        
        let filteredData = allData.filter(item => {
            const matchesSearch = item.nom.includes(searchTerm) || 
                                item.client.includes(searchTerm);
            const matchesStatus = !statusFilter || item.statut === statusFilter;
            const matchesClient = !clientFilter || item.client === clientFilter.toLowerCase();
            
            return matchesSearch && matchesStatus && matchesClient;
        });
        
        // Appliquer la pagination
        const startIndex = (currentPage - 1) * pageSize;
        const endIndex = startIndex + pageSize;
        const paginatedData = filteredData.slice(startIndex, endIndex);
        
        // Afficher les données filtrées
        displayFilteredData(paginatedData);
        updatePagination(filteredData.length);
    }
    
    function displayFilteredData(data) {
        const container = document.getElementById('campagnesContainer');
        container.innerHTML = '';
        data.forEach(item => {
            container.appendChild(item.element.cloneNode(true));
        });
    }
    
    function changePageSize() {
        pageSize = parseInt(document.getElementById('pageSize').value);
        currentPage = 1;
        filterTable();
    }
    
    function updatePagination(totalItems = allData.length) {
        const totalPages = Math.ceil(totalItems / pageSize);
        const pagination = document.getElementById('pagination');
        
        if (totalPages <= 1) {
            pagination.innerHTML = '';
            return;
        }
        
        let paginationHTML = '';
        
        // Bouton précédent
        paginationHTML += `
            <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                <a class="page-link" href="#" onclick="goToPage(${currentPage - 1})">Précédent</a>
            </li>
        `;
        
        // Pages
        const startPage = Math.max(1, currentPage - 2);
        const endPage = Math.min(totalPages, currentPage + 2);
        
        if (startPage > 1) {
            paginationHTML += '<li class="page-item"><a class="page-link" href="#" onclick="goToPage(1)">1</a></li>';
            if (startPage > 2) {
                paginationHTML += '<li class="page-item disabled"><span class="page-link">...</span></li>';
            }
        }
        
        for (let i = startPage; i <= endPage; i++) {
            paginationHTML += `
                <li class="page-item ${i === currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="goToPage(${i})">${i}</a>
                </li>
            `;
        }
        
        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                paginationHTML += '<li class="page-item disabled"><span class="page-link">...</span></li>';
            }
            paginationHTML += `<li class="page-item"><a class="page-link" href="#" onclick="goToPage(${totalPages})">${totalPages}</a></li>`;
        }
        
        // Bouton suivant
        paginationHTML += `
            <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                <a class="page-link" href="#" onclick="goToPage(${currentPage + 1})">Suivant</a>
            </li>
        `;
        
        pagination.innerHTML = paginationHTML;
    }
    
    function goToPage(page) {
        const totalPages = Math.ceil(allData.length / pageSize);
        if (page >= 1 && page <= totalPages) {
            currentPage = page;
            filterTable();
        }
    }
    
    function resetFilters() {
        document.getElementById('searchInput').value = '';
        document.getElementById('statusFilter').value = '';
        document.getElementById('clientFilter').value = '';
        currentPage = 1;
        filterTable();
    }
</script> 