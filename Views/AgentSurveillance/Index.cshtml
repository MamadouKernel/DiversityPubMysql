@model IEnumerable<DiversityPub.Models.AgentTerrain>
@{
    ViewData["Title"] = "Surveillance des Agents Terrain";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="mb-0">
                        <i class="fas fa-users-cog text-primary"></i> Surveillance des Agents Terrain
                    </h1>
                    <p class="text-muted mb-0">Suivi en temps réel des positions et activités</p>
                </div>
                                 <div class="d-flex gap-2">
                     <button onclick="updateStatistics()" class="btn btn-info">
                         <i class="fas fa-sync-alt"></i> Actualiser
                     </button>
                 </div>
            </div>

            <!-- Statistiques -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card bg-primary text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4 class="mb-0" id="totalAgents">@Model.Count()</h4>
                                    <small>Total Agents</small>
                                </div>
                                <i class="fas fa-users fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4 class="mb-0" id="onlineAgents">0</h4>
                                    <small>En Ligne</small>
                                </div>
                                <i class="fas fa-wifi fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-warning text-dark">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4 class="mb-0" id="activeActivations">0</h4>
                                    <small>Activations Actives</small>
                                </div>
                                <i class="fas fa-tasks fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-danger text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4 class="mb-0" id="openIncidents">0</h4>
                                    <small>Incidents Ouverts</small>
                                </div>
                                <i class="fas fa-exclamation-triangle fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Grille de cards agents -->
            <div class="row" id="agentsCardsContainer">
                                @foreach (var agent in Model)
                                {
                                    var lastPosition = agent.PositionsGPS.FirstOrDefault();
                    var isOnline = agent.EstConnecte;
                                    var activeActivations = agent.Activations.Count(a => a.Statut == DiversityPub.Models.enums.StatutActivation.EnCours);
                                    var openIncidents = agent.Incidents.Count(i => i.Statut == "Ouvert" || i.Statut == "EnCours");
                                    
                    <div class="col-lg-4 col-md-6 col-sm-12 mb-4 agent-card" data-agent-id="@agent.Id">
                        <div class="card h-100 shadow-sm">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                            <div class="d-flex align-items-center">
                                    <div class="agent-avatar me-3">
                                        <i class="fas fa-user-circle"></i>
                                                </div>
                                                <div>
                                                    <h6 class="mb-0">@agent.Utilisateur.Prenom @agent.Utilisateur.Nom</h6>
                                                    <small class="text-muted">@agent.Utilisateur.Email</small>
                                                </div>
                                            </div>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <a class="dropdown-item" href="@Url.Action("Details", "AgentSurveillance", new { id = agent.Id })">
                                                <i class="fas fa-eye text-info"></i> Voir détails
                                            </a>
                                        </li>
                                        @if (isOnline)
                                        {
                                            <li>
                                                <a class="dropdown-item text-warning" href="#" onclick="forceLogout('@agent.Id', '@agent.Utilisateur.Prenom @agent.Utilisateur.Nom')">
                                                    <i class="fas fa-sign-out-alt"></i> Forcer déconnexion
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="row mb-3">
                                    <div class="col-6">
                                        <small class="text-muted">Statut</small>
                                        <div>
                                            <span class="badge bg-@(isOnline ? "success" : "secondary")">
                                                <i class="fas fa-circle"></i> @(isOnline ? "En ligne" : "Hors ligne")
                                            </span>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <small class="text-muted">Activations</small>
                                        <div>
                                            <span class="badge bg-info">@activeActivations</span>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="mb-3">
                                    <small class="text-muted">Dernière Position</small>
                                    <div>
                                            @if (lastPosition != null)
                                            {
                                            <small>
                                                <i class="fas fa-map-marker-alt text-danger"></i> 
                                                        @lastPosition.Latitude.ToString("F6", System.Globalization.CultureInfo.InvariantCulture) / @lastPosition.Longitude.ToString("F6", System.Globalization.CultureInfo.InvariantCulture)
                                                    </small>
                                                    <br>
                                                    <small class="text-muted">
                                                        <i class="fas fa-clock"></i> 
                                                        @lastPosition.Horodatage.ToString("dd/MM HH:mm")
                                                    </small>
                                            }
                                            else
                                            {
                                            <small class="text-muted"><i class="fas fa-map-marker-alt"></i> Aucune position</small>
                                        }
                                    </div>
                                </div>
                                
                                <div class="mb-3">
                                    <small class="text-muted">Incidents</small>
                                    <div>
                                            @if (openIncidents > 0)
                                            {
                                            <span class="badge bg-danger">@openIncidents incidents ouverts</span>
                                            }
                                            else
                                            {
                                            <span class="badge bg-success">Aucun incident</span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer bg-transparent">
                                <div class="d-flex justify-content-end">
                                    <div class="btn-group btn-group-sm">
                                                <a href="@Url.Action("Details", "AgentSurveillance", new { id = agent.Id })" 
                                           class="btn btn-outline-primary" title="Détails">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                @if (isOnline)
                                                {
                                            <button class="btn btn-outline-warning" 
                                                            onclick="forceLogout('@agent.Id', '@agent.Utilisateur.Prenom @agent.Utilisateur.Nom')"
                                                            title="Forcer la déconnexion">
                                                        <i class="fas fa-sign-out-alt"></i>
                                                    </button>
                                                }
                                            </div>
                    </div>
                </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal Détails Agent -->
<div class="modal fade" id="agentDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user"></i> Détails de l'Agent
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="agentDetailsContent">
                <!-- Contenu chargé dynamiquement -->
            </div>
        </div>
    </div>
</div>

<style>
.agent-avatar {
        width: 40px;
        height: 40px;
    border-radius: 50%;
    background: linear-gradient(135deg, #A32D18, #EDAC00);
        display: flex;
        align-items: center;
        justify-content: center;
    color: white;
    font-size: 16px;
}

.agent-card {
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.agent-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
}

.badge {
    font-size: 0.75rem;
    }
    
    .badge i {
        font-size: 0.7em;
    }
    
.card-header {
    background: linear-gradient(135deg, #f8f9fa, #e9ecef);
    border-bottom: 1px solid #dee2e6;
}

.btn-group-sm .btn {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
}
</style>

<script>
    // Variables globales
    let agentsData = [];

    // Mettre à jour les statistiques et le tableau
    async function updateStatistics() {
        try {
            console.log('🔄 Mise à jour des statistiques...');
            const response = await fetch('/AgentSurveillance/GetPositions');
            const result = await response.json();
            
            console.log('📡 Réponse API:', result);
            
            if (result.success) {
                // Extraire les données du format $values
                agentsData = result.data.$values || result.data;
                console.log('📊 Données reçues:', agentsData.length, 'agents');
                console.log('📋 Détail des agents:', agentsData);
                
                const onlineCount = agentsData.filter(a => a.isOnline).length;
                const activeActivations = agentsData.reduce((sum, a) => sum + a.activeActivations, 0);
                const openIncidents = agentsData.reduce((sum, a) => sum + a.openIncidents, 0);

                console.log('📈 Statistiques calculées:', {
                    online: onlineCount,
                    activations: activeActivations,
                    incidents: openIncidents
                });

                // Mettre à jour les statistiques
                const onlineElement = document.getElementById('onlineAgents');
                const activationsElement = document.getElementById('activeActivations');
                const incidentsElement = document.getElementById('openIncidents');
                
                if (onlineElement) {
                    onlineElement.textContent = onlineCount;
                    console.log('✅ Compteur "En Ligne" mis à jour:', onlineCount);
                } else {
                    console.error('❌ Élément "onlineAgents" non trouvé');
                }
                
                if (activationsElement) {
                    activationsElement.textContent = activeActivations;
                }
                
                if (incidentsElement) {
                    incidentsElement.textContent = openIncidents;
                }

                // Mettre à jour les cards des agents
                updateAgentsCards(agentsData);
            } else {
                console.error('❌ Erreur API:', result.message);
            }
        } catch (error) {
            console.error('❌ Erreur lors de la mise à jour des statistiques:', error);
        }
    }

    // Mettre à jour les cards des agents
    function updateAgentsCards(agents) {
        const container = document.getElementById('agentsCardsContainer');
        if (!container) return;

        // Cacher toutes les cards existantes
        const existingCards = container.querySelectorAll('.agent-card');
        existingCards.forEach(card => card.style.display = 'none');

        // Mettre à jour ou créer les cards
        agents.forEach(agent => {
            let card = container.querySelector(`[data-agent-id="${agent.agentId}"]`);
            
            if (!card) {
                // Créer une nouvelle card si elle n'existe pas
                card = createAgentCard(agent);
                container.appendChild(card);
            } else {
                // Mettre à jour la card existante
                updateAgentCard(card, agent);
                card.style.display = 'block';
            }
        });
    }

    // Créer une nouvelle card agent
    function createAgentCard(agent) {
        const cardDiv = document.createElement('div');
        cardDiv.className = 'col-lg-4 col-md-6 col-sm-12 mb-4 agent-card';
        cardDiv.setAttribute('data-agent-id', agent.agentId);
            
            const lastPosition = agent.lastPosition;
            const isOnline = agent.isOnline;
            
        cardDiv.innerHTML = `
            <div class="card h-100 shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <div class="agent-avatar me-3">
                            <i class="fas fa-user-circle"></i>
                        </div>
                        <div>
                            <h6 class="mb-0">${agent.agentName}</h6>
                            <small class="text-muted">${agent.agentEmail}</small>
                        </div>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            <i class="fas fa-ellipsis-v"></i>
                        </button>
                        <ul class="dropdown-menu">
                            <li>
                                <a class="dropdown-item" href="/AgentSurveillance/Details/${agent.agentId}">
                                    <i class="fas fa-eye text-info"></i> Voir détails
                                </a>
                            </li>
                            ${isOnline ? `
                                <li>
                                    <a class="dropdown-item text-warning" href="#" onclick="forceLogout('${agent.agentId}', '${agent.agentName}')">
                                        <i class="fas fa-sign-out-alt"></i> Forcer déconnexion
                                    </a>
                                </li>
                            ` : ''}
                        </ul>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-6">
                            <small class="text-muted">Statut</small>
                            <div>
                    <span class="badge bg-${isOnline ? 'success' : 'secondary'}">
                        <i class="fas fa-circle"></i> ${isOnline ? 'En ligne' : 'Hors ligne'}
                    </span>
                            </div>
                        </div>
                        <div class="col-6">
                            <small class="text-muted">Activations</small>
                            <div>
                                <span class="badge bg-info">${agent.activeActivations}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <small class="text-muted">Dernière Position</small>
                        <div>
                    ${lastPosition ? `
                                <small>
                                    <i class="fas fa-map-marker-alt text-danger"></i> 
                                ${lastPosition.latitude.toFixed(6)} / ${lastPosition.longitude.toFixed(6)}
                            </small>
                            <br>
                            <small class="text-muted">
                                <i class="fas fa-clock"></i> 
                                ${new Date(lastPosition.horodatage).toLocaleString('fr-FR', {day: '2-digit', month: '2-digit', hour: '2-digit', minute: '2-digit'})}
                            </small>
                            ` : '<small class="text-muted"><i class="fas fa-map-marker-alt"></i> Aucune position</small>'}
                        </div>
                        </div>
                    
                    <div class="mb-3">
                        <small class="text-muted">Incidents</small>
                        <div>
                    ${agent.openIncidents > 0 ? 
                                `<span class="badge bg-danger">${agent.openIncidents} incidents ouverts</span>` : 
                                `<span class="badge bg-success">Aucun incident</span>`
                            }
                        </div>
                    </div>
                </div>
                <div class="card-footer bg-transparent">
                    <div class="d-flex justify-content-end">
                        <div class="btn-group btn-group-sm">
                        <a href="/AgentSurveillance/Details/${agent.agentId}" 
                               class="btn btn-outline-primary" title="Détails">
                            <i class="fas fa-eye"></i>
                        </a>
                        ${isOnline ? `
                                <button class="btn btn-outline-warning" 
                                    onclick="forceLogout('${agent.agentId}', '${agent.agentName}')"
                                    title="Forcer la déconnexion">
                                <i class="fas fa-sign-out-alt"></i>
                            </button>
                        ` : ''}
                    </div>
                    </div>
                </div>
            </div>
        `;
        
        return cardDiv;
    }

    // Mettre à jour une card agent existante
    function updateAgentCard(card, agent) {
        const lastPosition = agent.lastPosition;
        const isOnline = agent.isOnline;
        
        // Mettre à jour le nom et email
        const nameElement = card.querySelector('h6');
        const emailElement = card.querySelector('small.text-muted');
        if (nameElement) nameElement.textContent = agent.agentName;
        if (emailElement) emailElement.textContent = agent.agentEmail;
        
        // Mettre à jour le statut
        const statusBadge = card.querySelector('.badge');
        if (statusBadge) {
            statusBadge.className = `badge bg-${isOnline ? 'success' : 'secondary'}`;
            statusBadge.innerHTML = `<i class="fas fa-circle"></i> ${isOnline ? 'En ligne' : 'Hors ligne'}`;
        }
        
        // Mettre à jour les activations
        const activationsBadge = card.querySelector('.badge.bg-info');
        if (activationsBadge) {
            activationsBadge.textContent = agent.activeActivations;
        }
        
        // Mettre à jour la position
        const positionDiv = card.querySelector('.mb-3:nth-child(2) div');
        if (positionDiv) {
            if (lastPosition) {
                positionDiv.innerHTML = `
                    <small>
                        <i class="fas fa-map-marker-alt text-danger"></i> 
                        ${lastPosition.latitude.toFixed(6)} / ${lastPosition.longitude.toFixed(6)}
                    </small>
                    <br>
                    <small class="text-muted">
                        <i class="fas fa-clock"></i> 
                        ${new Date(lastPosition.horodatage).toLocaleString('fr-FR', {day: '2-digit', month: '2-digit', hour: '2-digit', minute: '2-digit'})}
                    </small>
                `;
            } else {
                positionDiv.innerHTML = '<small class="text-muted"><i class="fas fa-map-marker-alt"></i> Aucune position</small>';
            }
        }
        
        // Mettre à jour les incidents
        const incidentsDiv = card.querySelector('.mb-3:nth-child(3) div');
        if (incidentsDiv) {
            if (agent.openIncidents > 0) {
                incidentsDiv.innerHTML = `<span class="badge bg-danger">${agent.openIncidents} incidents ouverts</span>`;
            } else {
                incidentsDiv.innerHTML = '<span class="badge bg-success">Aucun incident</span>';
            }
        }
        
        // Mettre à jour le dropdown et les boutons
        const dropdown = card.querySelector('.dropdown-menu');
        if (dropdown) {
            dropdown.innerHTML = `
                <li>
                    <a class="dropdown-item" href="/AgentSurveillance/Details/${agent.agentId}">
                        <i class="fas fa-eye text-info"></i> Voir détails
                    </a>
                </li>
                ${isOnline ? `
                    <li>
                        <a class="dropdown-item text-warning" href="#" onclick="forceLogout('${agent.agentId}', '${agent.agentName}')">
                            <i class="fas fa-sign-out-alt"></i> Forcer déconnexion
                        </a>
                    </li>
                ` : ''}
            `;
        }
        
        const btnGroup = card.querySelector('.btn-group');
        if (btnGroup) {
            btnGroup.innerHTML = `
                <a href="/AgentSurveillance/Details/${agent.agentId}" 
                   class="btn btn-outline-primary" title="Détails">
                    <i class="fas fa-eye"></i>
                </a>
                ${isOnline ? `
                    <button class="btn btn-outline-warning" 
                            onclick="forceLogout('${agent.agentId}', '${agent.agentName}')"
                            title="Forcer la déconnexion">
                        <i class="fas fa-sign-out-alt"></i>
                    </button>
                ` : ''}
            `;
        }
    }

    // Mettre à jour les statistiques toutes les 30 secondes
    document.addEventListener('DOMContentLoaded', function() {
        updateStatistics();
        setInterval(updateStatistics, 30000);
    });

    // Fonction pour forcer la déconnexion d'un agent
    async function forceLogout(agentId, agentName) {
        if (confirm(`Êtes-vous sûr de vouloir forcer la déconnexion de ${agentName} ?`)) {
            try {
                const response = await fetch(`/Auth/ForceLogout?agentId=${agentId}`, {
                    method: 'GET'
                });
                
                if (response.ok) {
                    alert(`Déconnexion forcée de ${agentName} réussie`);
                    updateStatistics(); // Recharger les données
                } else {
                    alert('Erreur lors de la déconnexion forcée');
                }
            } catch (error) {
                console.error('❌ Erreur lors de la déconnexion forcée:', error);
                alert('Erreur lors de la déconnexion forcée');
            }
        }
    }
</script>

 