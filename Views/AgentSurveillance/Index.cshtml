@model IEnumerable<DiversityPub.Models.AgentTerrain>
@{
    ViewData["Title"] = "Surveillance des Agents Terrain";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="mb-0">
                        <i class="fas fa-users-cog text-primary"></i> Surveillance des Agents Terrain
                    </h1>
                    <p class="text-muted mb-0">Suivi en temps réel des positions et activités</p>
                </div>
                                 <div class="d-flex gap-2">
                     <button onclick="updateStatistics()" class="btn btn-info">
                         <i class="fas fa-sync-alt"></i> Actualiser
                     </button>
                 </div>
            </div>

            <!-- Statistiques -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card bg-primary text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4 class="mb-0" id="totalAgents">@Model.Count()</h4>
                                    <small>Total Agents</small>
                                </div>
                                <i class="fas fa-users fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4 class="mb-0" id="onlineAgents">0</h4>
                                    <small>En Ligne</small>
                                </div>
                                <i class="fas fa-wifi fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-warning text-dark">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4 class="mb-0" id="activeActivations">0</h4>
                                    <small>Activations Actives</small>
                                </div>
                                <i class="fas fa-tasks fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-danger text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4 class="mb-0" id="openIncidents">0</h4>
                                    <small>Incidents Ouverts</small>
                                </div>
                                <i class="fas fa-exclamation-triangle fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>



            <!-- Liste des agents -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-list"></i> Liste des Agents
                    </h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="agentsTable">
                            <thead>
                                <tr>
                                    <th>Agent</th>
                                    <th>Statut</th>
                                    <th>Dernière Position</th>
                                    <th>Activations Actives</th>
                                    <th>Incidents</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var agent in Model)
                                {
                                    var lastPosition = agent.PositionsGPS.FirstOrDefault();
                                    var isOnline = agent.EstConnecte; // Utiliser le statut de connexion direct
                                    var activeActivations = agent.Activations.Count(a => a.Statut == DiversityPub.Models.enums.StatutActivation.EnCours);
                                    var openIncidents = agent.Incidents.Count(i => i.Statut == "Ouvert" || i.Statut == "EnCours");
                                    
                                    <tr data-agent-id="@agent.Id">
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="avatar-sm me-3">
                                                    <i class="fas fa-user-circle fa-2x text-primary"></i>
                                                </div>
                                                <div>
                                                    <h6 class="mb-0">@agent.Utilisateur.Prenom @agent.Utilisateur.Nom</h6>
                                                    <small class="text-muted">@agent.Utilisateur.Email</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge bg-@(isOnline ? "success" : "secondary")">
                                                <i class="fas fa-circle"></i> @(isOnline ? "En ligne" : "Hors ligne")
                                            </span>
                                        </td>
                                        <td>
                                            @if (lastPosition != null)
                                            {
                                                <div>
                                                    <small class="text-muted">
                                                        <i class="fas fa-map-marker-alt"></i> 
                                                        @lastPosition.Latitude.ToString("F6", System.Globalization.CultureInfo.InvariantCulture) / @lastPosition.Longitude.ToString("F6", System.Globalization.CultureInfo.InvariantCulture)
                                                    </small>
                                                    <br>
                                                    <small class="text-muted">
                                                        <i class="fas fa-clock"></i> 
                                                        @lastPosition.Horodatage.ToString("dd/MM HH:mm")
                                                    </small>
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Aucune position</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-info">@activeActivations</span>
                                        </td>
                                        <td>
                                            @if (openIncidents > 0)
                                            {
                                                <span class="badge bg-danger">@openIncidents</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-success">0</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a href="@Url.Action("Details", "AgentSurveillance", new { id = agent.Id })" 
                                                   class="btn btn-sm btn-outline-primary">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                @if (isOnline)
                                                {
                                                    <button class="btn btn-sm btn-outline-warning" 
                                                            onclick="forceLogout('@agent.Id', '@agent.Utilisateur.Prenom @agent.Utilisateur.Nom')"
                                                            title="Forcer la déconnexion">
                                                        <i class="fas fa-sign-out-alt"></i>
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Détails Agent -->
<div class="modal fade" id="agentDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user"></i> Détails de l'Agent
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="agentDetailsContent">
                <!-- Contenu chargé dynamiquement -->
            </div>
        </div>
    </div>
</div>

<style>
    .avatar-sm {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .badge i {
        font-size: 0.7em;
    }
    

</style>


<script>
    // Variables globales
    let agentsData = [];

    // Mettre à jour les statistiques et le tableau
    async function updateStatistics() {
        try {
            console.log('🔄 Mise à jour des statistiques...');
            const response = await fetch('/AgentSurveillance/GetPositions');
            const result = await response.json();
            
            console.log('📡 Réponse API:', result);
            
            if (result.success) {
                // Extraire les données du format $values
                agentsData = result.data.$values || result.data;
                console.log('📊 Données reçues:', agentsData.length, 'agents');
                console.log('📋 Détail des agents:', agentsData);
                
                const onlineCount = agentsData.filter(a => a.isOnline).length;
                const activeActivations = agentsData.reduce((sum, a) => sum + a.activeActivations, 0);
                const openIncidents = agentsData.reduce((sum, a) => sum + a.openIncidents, 0);

                console.log('📈 Statistiques calculées:', {
                    online: onlineCount,
                    activations: activeActivations,
                    incidents: openIncidents
                });

                // Mettre à jour les statistiques
                const onlineElement = document.getElementById('onlineAgents');
                const activationsElement = document.getElementById('activeActivations');
                const incidentsElement = document.getElementById('openIncidents');
                
                if (onlineElement) {
                    onlineElement.textContent = onlineCount;
                    console.log('✅ Compteur "En Ligne" mis à jour:', onlineCount);
                } else {
                    console.error('❌ Élément "onlineAgents" non trouvé');
                }
                
                if (activationsElement) {
                    activationsElement.textContent = activeActivations;
                }
                
                if (incidentsElement) {
                    incidentsElement.textContent = openIncidents;
                }

                // Mettre à jour le tableau des agents
                updateAgentsTable(agentsData);
            } else {
                console.error('❌ Erreur API:', result.message);
            }
        } catch (error) {
            console.error('❌ Erreur lors de la mise à jour des statistiques:', error);
        }
    }

    // Mettre à jour le tableau des agents
    function updateAgentsTable(agents) {
        const tbody = document.querySelector('#agentsTable tbody');
        if (!tbody) return;

        tbody.innerHTML = '';
        
        agents.forEach(agent => {
            const row = document.createElement('tr');
            row.setAttribute('data-agent-id', agent.agentId);
            
            const lastPosition = agent.lastPosition;
            const isOnline = agent.isOnline;
            
            row.innerHTML = `
                <td>
                    <div class="d-flex align-items-center">
                        <div class="avatar-sm me-3">
                            <i class="fas fa-user-circle fa-2x text-primary"></i>
                        </div>
                        <div>
                            <h6 class="mb-0">${agent.agentName}</h6>
                            <small class="text-muted">${agent.agentEmail}</small>
                        </div>
                    </div>
                </td>
                <td>
                    <span class="badge bg-${isOnline ? 'success' : 'secondary'}">
                        <i class="fas fa-circle"></i> ${isOnline ? 'En ligne' : 'Hors ligne'}
                    </span>
                </td>
                <td>
                    ${lastPosition ? `
                        <div>
                            <small class="text-muted">
                                <i class="fas fa-map-marker-alt"></i> 
                                ${lastPosition.latitude.toFixed(6)} / ${lastPosition.longitude.toFixed(6)}
                            </small>
                            <br>
                            <small class="text-muted">
                                <i class="fas fa-clock"></i> 
                                ${new Date(lastPosition.horodatage).toLocaleString('fr-FR', {day: '2-digit', month: '2-digit', hour: '2-digit', minute: '2-digit'})}
                            </small>
                        </div>
                    ` : '<span class="text-muted">Aucune position</span>'}
                </td>
                <td>
                    <span class="badge bg-info">${agent.activeActivations}</span>
                </td>
                <td>
                    ${agent.openIncidents > 0 ? 
                        `<span class="badge bg-danger">${agent.openIncidents}</span>` : 
                        `<span class="badge bg-success">0</span>`
                    }
                </td>
                <td>
                    <div class="btn-group" role="group">
                        <a href="/AgentSurveillance/Details/${agent.agentId}" 
                           class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-eye"></i>
                        </a>
                        ${isOnline ? `
                            <button class="btn btn-sm btn-outline-warning" 
                                    onclick="forceLogout('${agent.agentId}', '${agent.agentName}')"
                                    title="Forcer la déconnexion">
                                <i class="fas fa-sign-out-alt"></i>
                            </button>
                        ` : ''}
                    </div>
                </td>
            `;
            
            tbody.appendChild(row);
        });
    }

    // Mettre à jour les statistiques toutes les 30 secondes
    document.addEventListener('DOMContentLoaded', function() {
        updateStatistics();
        setInterval(updateStatistics, 30000);
    });

    // Fonction pour forcer la déconnexion d'un agent
    async function forceLogout(agentId, agentName) {
        if (confirm(`Êtes-vous sûr de vouloir forcer la déconnexion de ${agentName} ?`)) {
            try {
                const response = await fetch(`/Auth/ForceLogout?agentId=${agentId}`, {
                    method: 'GET'
                });
                
                if (response.ok) {
                    alert(`Déconnexion forcée de ${agentName} réussie`);
                    updateStatistics(); // Recharger les données
                } else {
                    alert('Erreur lors de la déconnexion forcée');
                }
            } catch (error) {
                console.error('❌ Erreur lors de la déconnexion forcée:', error);
                alert('Erreur lors de la déconnexion forcée');
            }
        }
    }


</script>

 