@model DiversityPub.Models.Activation
@{
    ViewData["Title"] = "Assigner des Agents";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header avec navigation -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 class="mb-1">
                        <i class="fas fa-users text-primary"></i> Assignation des Agents
                    </h2>
                    <p class="text-muted mb-0">Gérez les agents et le responsable pour cette activation</p>
                </div>
                <div>
                    <a href="@Url.Action("Index", "Assignation")" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left"></i> Retour
                    </a>
                </div>
            </div>

            <!-- Informations de l'activation -->
            <div class="row mb-4">
                <div class="col-md-8">
                    <div class="card border-0 shadow-sm">
                        <div class="card-header bg-gradient-primary text-white">
                            <h5 class="mb-0">
                                <i class="fas fa-info-circle"></i> Détails de l'Activation
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label text-muted small">Nom de l'Activation</label>
                                        <p class="h6 mb-0">@Model.Nom</p>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label text-muted small">Campagne</label>
                                        <p class="h6 mb-0">@Model.Campagne?.Nom</p>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label text-muted small">Lieu</label>
                                        <p class="h6 mb-0">@Model.Lieu?.Nom - @Model.Lieu?.Adresse</p>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label text-muted small">Date</label>
                                        <p class="h6 mb-0">@Model.DateActivation.ToString("dd/MM/yyyy")</p>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label text-muted small">Statut</label>
                                        <span class="badge bg-@(Model.Statut switch {
                                            DiversityPub.Models.enums.StatutActivation.Planifiee => "warning",
                                            DiversityPub.Models.enums.StatutActivation.EnCours => "success",
                                            DiversityPub.Models.enums.StatutActivation.Suspendue => "warning",
                                            DiversityPub.Models.enums.StatutActivation.Terminee => "info",
                                            _ => "secondary"
                                        }) fs-6">@Model.Statut</span>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label text-muted small">Horaires</label>
                                        <p class="h6 mb-0">@Model.HeureDebut.ToString(@"hh\:mm") - @Model.HeureFin.ToString(@"hh\:mm")</p>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Informations sur les restrictions selon le statut -->
                            @if (Model.Statut == DiversityPub.Models.enums.StatutActivation.EnCours)
                            {
                                <div class="alert alert-info border-0 mt-3">
                                    <i class="fas fa-info-circle"></i>
                                    <strong>Activation en cours :</strong> Vous pouvez modifier les assignations. Si vous retirez tous les agents, considérez de suspendre ou terminer l'activation.
                                </div>
                            }
                            else if (Model.Statut == DiversityPub.Models.enums.StatutActivation.Suspendue)
                            {
                                <div class="alert alert-warning border-0 mt-3">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    <strong>Activation suspendue :</strong> Vous pouvez modifier les assignations. L'activation pourra être reprise une fois les agents assignés.
                                </div>
                            }
                            else if (Model.Statut == DiversityPub.Models.enums.StatutActivation.Terminee)
                            {
                                <div class="alert alert-secondary border-0 mt-3">
                                    <i class="fas fa-check-circle"></i>
                                    <strong>Activation terminée :</strong> Les modifications d'assignation n'affecteront plus le déroulement de l'activation.
                                </div>
                            }
                        </div>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="card border-0 shadow-sm">
                        <div class="card-header bg-gradient-success text-white">
                            <h6 class="mb-0">
                                <i class="fas fa-crown"></i> Responsable Actuel
                            </h6>
                        </div>
                        <div class="card-body text-center">
                            @if (Model.ResponsableId.HasValue && Model.AgentsTerrain.Any(a => a.Id == Model.ResponsableId))
                            {
                                var responsable = Model.AgentsTerrain.First(a => a.Id == Model.ResponsableId);
                                <div class="avatar-lg mb-3">
                                    <i class="fas fa-crown fa-3x text-warning"></i>
                                </div>
                                <h6 class="text-warning fw-bold">@responsable.Utilisateur.Prenom @responsable.Utilisateur.Nom</h6>
                                <small class="text-muted">Responsable désigné</small>
                            }
                            else
                            {
                                <div class="avatar-lg mb-3">
                                    <i class="fas fa-user-slash fa-3x text-muted"></i>
                                </div>
                                <h6 class="text-muted">Aucun responsable</h6>
                                <small class="text-muted">Sélectionnez un responsable ci-dessous</small>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Formulaire d'assignation -->
            <form asp-action="Edit" method="post">
                <input type="hidden" name="id" value="@Model.Id" />
                <input type="hidden" name="responsableId" value="@Model.ResponsableId" />
                
                <!-- Section Agents Terrain -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-gradient-info text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-user-friends"></i> Sélection des Agents Terrain
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted mb-3">
                            <i class="fas fa-info-circle"></i> 
                            Cochez les agents qui participeront à cette activation.
                        </p>
                        
                        <div class="row">
                            @if (ViewBag.AgentsTerrain != null && ((IEnumerable<DiversityPub.Models.AgentTerrain>)ViewBag.AgentsTerrain).Any())
                            {
                                @foreach (var agent in ViewBag.AgentsTerrain)
                                {
                                    var isSelected = Model.AgentsTerrain?.Any(at => at.Id == agent.Id) ?? false;
                                    <div class="col-md-4 col-lg-3 mb-3">
                                        <div class="agent-card @(isSelected ? "selected" : "")" data-agent-id="@agent.Id">
                                            <div class="form-check h-100">
                                                <input class="form-check-input" type="checkbox" name="agentIds" 
                                                       value="@agent.Id" id="agent_@agent.Id" @(isSelected ? "checked" : "") />
                                                <label class="form-check-label h-100 d-flex flex-column justify-content-center" for="agent_@agent.Id">
                                                    <div class="text-center">
                                                        <i class="fas fa-user-circle fa-2x text-primary mb-2"></i>
                                                        <h6 class="mb-1">@agent.Utilisateur.Prenom @agent.Utilisateur.Nom</h6>
                                                        <small class="text-muted">@agent.Email</small>
                                                    </div>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="col-12">
                                    <div class="alert alert-info">
                                        <i class="fas fa-info-circle"></i> Aucun agent terrain disponible pour le moment.
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Section Sélection du Responsable -->
                <div class="card border-0 shadow-sm mb-4" id="responsableSection" style="display: none;">
                    <div class="card-header bg-gradient-warning text-dark">
                        <h5 class="mb-0">
                            <i class="fas fa-crown"></i> Désigner le Responsable
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted mb-4">
                            <i class="fas fa-info-circle"></i> 
                            Choisissez un responsable parmi les agents sélectionnés. Le responsable sera chargé de coordonner l'équipe.
                        </p>
                        
                        <div class="row" id="responsableOptions">
                            <!-- Les options seront générées dynamiquement par JavaScript -->
                        </div>
                        
                        <div id="responsableConfirmation" class="mt-3">
                            <!-- La confirmation sera affichée ici -->
                        </div>
                    </div>
                </div>

                <!-- Boutons d'action -->
                <div class="d-flex justify-content-between">
                    <a href="@Url.Action("Index", "Assignation")" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left"></i> Annuler
                    </a>
                    
                    <div class="d-flex gap-2">
                        @if (Model.Statut == DiversityPub.Models.enums.StatutActivation.EnCours)
                        {
                            <button type="button" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#suspendModal">
                                <i class="fas fa-pause"></i> Suspendre l'Activation
                            </button>
                            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#terminateModal">
                                <i class="fas fa-check"></i> Terminer l'Activation
                            </button>
                        }
                        else if (Model.Statut == DiversityPub.Models.enums.StatutActivation.Suspendue)
                        {
                            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#resumeModal">
                                <i class="fas fa-play"></i> Reprendre l'Activation
                            </button>
                        }
                        
                        <button type="submit" class="btn btn-primary btn-lg" id="submitButton" disabled>
                            <i class="fas fa-save"></i> Enregistrer l'Assignation
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal de suspension -->
<div class="modal fade" id="suspendModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">
                    <i class="fas fa-pause"></i> Suspendre l'Activation
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="ChangerStatut" asp-controller="Activation" method="post">
                <input type="hidden" name="id" value="@Model.Id" />
                <input type="hidden" name="nouveauStatut" value="@DiversityPub.Models.enums.StatutActivation.Suspendue" />
                <div class="modal-body">
                    <p>Êtes-vous sûr de vouloir suspendre cette activation ?</p>
                    <div class="mb-3">
                        <label for="motifSuspension" class="form-label">Motif de suspension (obligatoire)</label>
                        <textarea class="form-control" id="motifSuspension" name="motifSuspension" rows="3" required 
                                  placeholder="Expliquez pourquoi vous suspendez cette activation..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="submit" class="btn btn-warning">
                        <i class="fas fa-pause"></i> Suspendre
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal de terminaison -->
<div class="modal fade" id="terminateModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-check"></i> Terminer l'Activation
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="ChangerStatut" asp-controller="Activation" method="post">
                <input type="hidden" name="id" value="@Model.Id" />
                <input type="hidden" name="nouveauStatut" value="@DiversityPub.Models.enums.StatutActivation.Terminee" />
                <div class="modal-body">
                    <p>Êtes-vous sûr de vouloir terminer cette activation ?</p>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        Cette action est irréversible. L'activation sera marquée comme terminée.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-check"></i> Terminer
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal de reprise -->
<div class="modal fade" id="resumeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-play"></i> Reprendre l'Activation
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="ChangerStatut" asp-controller="Activation" method="post">
                <input type="hidden" name="id" value="@Model.Id" />
                <input type="hidden" name="nouveauStatut" value="@DiversityPub.Models.enums.StatutActivation.EnCours" />
                <div class="modal-body">
                    <p>Êtes-vous sûr de vouloir reprendre cette activation ?</p>
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        Assurez-vous que des agents sont assignés avant de reprendre l'activation.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-play"></i> Reprendre
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .bg-gradient-primary {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    }
    .bg-gradient-success {
        background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);
    }
    .bg-gradient-info {
        background: linear-gradient(135deg, #17a2b8 0%, #117a8b 100%);
    }
    .bg-gradient-warning {
        background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%);
    }
    
    .agent-card {
        border: 2px solid #e9ecef;
        border-radius: 10px;
        padding: 15px;
        transition: all 0.3s ease;
        cursor: pointer;
        background: white;
    }
    
    .agent-card:hover {
        border-color: #007bff;
        box-shadow: 0 4px 8px rgba(0,123,255,0.2);
        transform: translateY(-2px);
    }
    
    .agent-card.selected {
        border-color: #28a745;
        background-color: #f8fff9;
        box-shadow: 0 4px 8px rgba(40,167,69,0.2);
    }
    
    .agent-card .form-check {
        margin: 0;
    }
    
    .agent-card .form-check-input {
        position: absolute;
        opacity: 0;
    }
    
    .agent-card .form-check-label {
        cursor: pointer;
        margin: 0;
        padding: 0;
    }
    
    .responsable-option {
        border: 2px solid #e9ecef;
        border-radius: 15px;
        transition: all 0.3s ease;
        cursor: pointer;
        background: white;
        overflow: hidden;
    }
    
    .responsable-option:hover {
        border-color: #ffc107;
        box-shadow: 0 6px 12px rgba(255,193,7,0.3);
        transform: translateY(-3px);
    }
    
    .responsable-selected {
        border: 3px solid #ffc107 !important;
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%) !important;
        box-shadow: 0 8px 16px rgba(255,193,7,0.4) !important;
    }
    
    .responsable-selected .text-primary {
        color: #ffc107 !important;
    }
    
    .responsable-selected h6 {
        color: #856404 !important;
        font-weight: bold !important;
    }
    
    .avatar-lg {
        width: 80px;
        height: 80px;
        margin: 0 auto;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        background: rgba(255,193,7,0.1);
    }
    
    .btn-lg {
        padding: 12px 30px;
        font-size: 1.1rem;
    }
    
    .card {
        border-radius: 15px;
    }
    
    .card-header {
        border-radius: 15px 15px 0 0 !important;
        border: none;
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const agentCheckboxes = document.querySelectorAll('input[name="agentIds"]');
    const responsableSection = document.getElementById('responsableSection');
    const responsableOptions = document.getElementById('responsableOptions');
    
    // Créer l'input caché pour le responsable
    let responsableInput = document.querySelector('input[name="responsableId"]');
    if (!responsableInput) {
        responsableInput = document.createElement('input');
        responsableInput.type = 'hidden';
        responsableInput.name = 'responsableId';
        document.querySelector('form').appendChild(responsableInput);
    }

    // Fonction pour mettre à jour les options de responsable
    function updateResponsableOptions() {
        const selectedAgents = [];
        
        agentCheckboxes.forEach(checkbox => {
            if (checkbox.checked) {
                const agentCard = checkbox.closest('.agent-card');
                const agentName = agentCard.querySelector('h6').textContent.trim();
                const agentId = checkbox.value;
                selectedAgents.push({ id: agentId, name: agentName });
            }
        });

        // Afficher/masquer la section responsable
        if (selectedAgents.length > 0) {
            responsableSection.style.display = 'block';
            
            // Générer les options de responsable
            responsableOptions.innerHTML = '';
            selectedAgents.forEach(agent => {
                const optionDiv = document.createElement('div');
                optionDiv.className = 'col-md-4 col-lg-3 mb-3';
                optionDiv.innerHTML = `
                    <div class="responsable-option" data-agent-id="${agent.id}">
                        <div class="card-body text-center p-4">
                            <div class="avatar-lg mb-3">
                                <i class="fas fa-user-circle fa-2x text-primary"></i>
                            </div>
                            <h6 class="mb-2">${agent.name}</h6>
                            <small class="text-muted">Cliquer pour désigner comme responsable</small>
                        </div>
                    </div>
                `;
                
                optionDiv.addEventListener('click', function() {
                    // Désélectionner tous les autres
                    document.querySelectorAll('.responsable-option').forEach(opt => {
                        opt.classList.remove('responsable-selected');
                        const smallText = opt.querySelector('small');
                        if (smallText) {
                            smallText.textContent = 'Cliquer pour désigner comme responsable';
                            smallText.className = 'text-muted';
                        }
                    });
                    
                    // Sélectionner celui-ci
                    this.querySelector('.responsable-option').classList.add('responsable-selected');
                    const smallText = this.querySelector('small');
                    if (smallText) {
                        smallText.textContent = '✅ Responsable sélectionné';
                        smallText.className = 'text-success fw-bold';
                    }
                    responsableInput.value = agent.id;
                    
                    // Afficher un message de confirmation
                    const confirmationDiv = document.getElementById('responsableConfirmation');
                    if (confirmationDiv) {
                        confirmationDiv.innerHTML = `
                            <div class="alert alert-success border-0 shadow-sm">
                                <i class="fas fa-check-circle"></i> 
                                <strong>Responsable sélectionné :</strong> ${agent.name}
                            </div>
                        `;
                    }
                    
                    // Activer le bouton de soumission
                    const submitButton = document.getElementById('submitButton');
                    if (submitButton) {
                        submitButton.disabled = false;
                        submitButton.classList.remove('btn-secondary');
                        submitButton.classList.add('btn-primary');
                    }
                });
                
                responsableOptions.appendChild(optionDiv);
            });
        } else {
            responsableSection.style.display = 'none';
            responsableInput.value = '';
            
            // Désactiver le bouton de soumission
            const submitButton = document.getElementById('submitButton');
            if (submitButton) {
                submitButton.disabled = true;
                submitButton.classList.remove('btn-primary');
                submitButton.classList.add('btn-secondary');
            }
        }
    }

    // Écouter les changements sur les checkboxes d'agents
    agentCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', updateResponsableOptions);
    });

    // Initialiser au chargement de la page
    updateResponsableOptions();
    
    // Pré-sélectionner le responsable actuel s'il existe
    const currentResponsableId = '@Model.ResponsableId';
    if (currentResponsableId && currentResponsableId !== '00000000-0000-0000-0000-000000000000') {
        setTimeout(() => {
            const responsableOption = document.querySelector(`[data-agent-id="${currentResponsableId}"]`);
            if (responsableOption) {
                responsableOption.classList.add('responsable-selected');
                const smallText = responsableOption.querySelector('small');
                if (smallText) {
                    smallText.textContent = '✅ Responsable sélectionné';
                    smallText.className = 'text-success fw-bold';
                }
                responsableInput.value = currentResponsableId;
                
                // Activer le bouton de soumission si un responsable est déjà sélectionné
                const submitButton = document.getElementById('submitButton');
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.classList.remove('btn-secondary');
                    submitButton.classList.add('btn-primary');
                }
            }
        }, 200);
    }
    
    // Empêcher la soumission sans responsable
    document.querySelector('form').addEventListener('submit', function(e) {
        if (!responsableInput.value) {
            alert('Veuillez sélectionner un responsable avant de valider.');
            e.preventDefault();
            return false;
        }
    });
});
</script> 