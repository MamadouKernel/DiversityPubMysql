// <auto-generated />
using System;
using DiversityPub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiversityPub.Migrations
{
    [DbContext(typeof(DiversityPubDbContext))]
    [Migration("20250821165908_AddSuperAdminRole")]
    partial class AddSuperAdminRole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ActivationAgentTerrain", b =>
                {
                    b.Property<Guid>("ActivationsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AgentsTerrainId")
                        .HasColumnType("char(36)");

                    b.HasKey("ActivationsId", "AgentsTerrainId");

                    b.HasIndex("AgentsTerrainId");

                    b.ToTable("ActivationAgentTerrain");
                });

            modelBuilder.Entity("DiversityPub.Models.Activation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CampagneId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateActivation")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateSuspension")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateValidationPreuves")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("HeureDebut")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("HeureFin")
                        .HasColumnType("time(6)");

                    b.Property<string>("Instructions")
                        .HasColumnType("longtext");

                    b.Property<Guid>("LieuId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MotifSuspension")
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("PreuvesValidees")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ResponsableId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<Guid?>("ValideParId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CampagneId");

                    b.HasIndex("LieuId");

                    b.HasIndex("ResponsableId");

                    b.HasIndex("ValideParId");

                    b.ToTable("Activations");
                });

            modelBuilder.Entity("DiversityPub.Models.AgentTerrain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DerniereConnexion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DerniereDeconnexion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EstConnecte")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UtilisateurId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId")
                        .IsUnique();

                    b.ToTable("AgentsTerrain");
                });

            modelBuilder.Entity("DiversityPub.Models.Campagne", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Objectifs")
                        .HasColumnType("longtext");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Campagnes");
                });

            modelBuilder.Entity("DiversityPub.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailContactPrincipal")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NomContactPrincipal")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NomDirigeant")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RaisonSociale")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RegistreCommerce")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TelephoneContactPrincipal")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UtilisateurId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DiversityPub.Models.DemandeActivation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CampagneId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateActivation")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateDemande")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateReponse")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<TimeSpan>("HeureDebut")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("HeureFin")
                        .HasColumnType("time(6)");

                    b.Property<string>("Instructions")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("LieuId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MotifRefus")
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("ReponduParId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampagneId");

                    b.HasIndex("ClientId");

                    b.HasIndex("LieuId");

                    b.HasIndex("ReponduParId");

                    b.ToTable("DemandesActivation");
                });

            modelBuilder.Entity("DiversityPub.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AgentTerrainId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateUpload")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AgentTerrainId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DiversityPub.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ActivationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("AdminMasquant")
                        .HasColumnType("longtext");

                    b.Property<string>("AdminRepondant")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CampagneId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateFeedback")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateMasquage")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateReponseAdmin")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("EstMasque")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<string>("ReponseAdmin")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ActivationId");

                    b.HasIndex("CampagneId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("DiversityPub.Models.Incident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ActivationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AgentTerrainId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CommentaireResolution")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateResolution")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Priorite")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ActivationId");

                    b.HasIndex("AgentTerrainId");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("DiversityPub.Models.Lieu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Lieux");
                });

            modelBuilder.Entity("DiversityPub.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ActivationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AgentTerrainId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CommentaireValidation")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateUpload")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Valide")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ValideParId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ActivationId");

                    b.HasIndex("AgentTerrainId");

                    b.HasIndex("ValideParId");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("DiversityPub.Models.PositionGPS", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AgentTerrainId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Horodatage")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<double>("Precision")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AgentTerrainId");

                    b.ToTable("PositionsGPS");
                });

            modelBuilder.Entity("DiversityPub.Models.Utilisateur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Supprimer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Utilisateurs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Email = "admin@diversitypub.ci",
                            MotDePasse = "$2a$11$aJeLp7uoJndd7QCLHQu9kuUCXSHvtW95AiQs6a2u2GIhFWkDhxRwW",
                            Nom = "Super",
                            Prenom = "Admin",
                            Role = 1,
                            Supprimer = 0
                        });
                });

            modelBuilder.Entity("ActivationAgentTerrain", b =>
                {
                    b.HasOne("DiversityPub.Models.Activation", null)
                        .WithMany()
                        .HasForeignKey("ActivationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiversityPub.Models.AgentTerrain", null)
                        .WithMany()
                        .HasForeignKey("AgentsTerrainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DiversityPub.Models.Activation", b =>
                {
                    b.HasOne("DiversityPub.Models.Campagne", "Campagne")
                        .WithMany("Activations")
                        .HasForeignKey("CampagneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiversityPub.Models.Lieu", "Lieu")
                        .WithMany("Activations")
                        .HasForeignKey("LieuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiversityPub.Models.AgentTerrain", "Responsable")
                        .WithMany()
                        .HasForeignKey("ResponsableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DiversityPub.Models.Utilisateur", "ValidePar")
                        .WithMany()
                        .HasForeignKey("ValideParId");

                    b.Navigation("Campagne");

                    b.Navigation("Lieu");

                    b.Navigation("Responsable");

                    b.Navigation("ValidePar");
                });

            modelBuilder.Entity("DiversityPub.Models.AgentTerrain", b =>
                {
                    b.HasOne("DiversityPub.Models.Utilisateur", "Utilisateur")
                        .WithOne("AgentTerrain")
                        .HasForeignKey("DiversityPub.Models.AgentTerrain", "UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("DiversityPub.Models.Campagne", b =>
                {
                    b.HasOne("DiversityPub.Models.Client", "Client")
                        .WithMany("Campagnes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DiversityPub.Models.Client", b =>
                {
                    b.HasOne("DiversityPub.Models.Utilisateur", "Utilisateur")
                        .WithOne("Client")
                        .HasForeignKey("DiversityPub.Models.Client", "UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("DiversityPub.Models.DemandeActivation", b =>
                {
                    b.HasOne("DiversityPub.Models.Campagne", "Campagne")
                        .WithMany("DemandesActivation")
                        .HasForeignKey("CampagneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiversityPub.Models.Client", "Client")
                        .WithMany("DemandesActivation")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiversityPub.Models.Lieu", "Lieu")
                        .WithMany("DemandesActivation")
                        .HasForeignKey("LieuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiversityPub.Models.Utilisateur", "ReponduPar")
                        .WithMany()
                        .HasForeignKey("ReponduParId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Campagne");

                    b.Navigation("Client");

                    b.Navigation("Lieu");

                    b.Navigation("ReponduPar");
                });

            modelBuilder.Entity("DiversityPub.Models.Document", b =>
                {
                    b.HasOne("DiversityPub.Models.AgentTerrain", "AgentTerrain")
                        .WithMany("Documents")
                        .HasForeignKey("AgentTerrainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AgentTerrain");
                });

            modelBuilder.Entity("DiversityPub.Models.Feedback", b =>
                {
                    b.HasOne("DiversityPub.Models.Activation", "Activation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ActivationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DiversityPub.Models.Campagne", "Campagne")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CampagneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Activation");

                    b.Navigation("Campagne");
                });

            modelBuilder.Entity("DiversityPub.Models.Incident", b =>
                {
                    b.HasOne("DiversityPub.Models.Activation", "Activation")
                        .WithMany("Incidents")
                        .HasForeignKey("ActivationId");

                    b.HasOne("DiversityPub.Models.AgentTerrain", "AgentTerrain")
                        .WithMany("Incidents")
                        .HasForeignKey("AgentTerrainId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Activation");

                    b.Navigation("AgentTerrain");
                });

            modelBuilder.Entity("DiversityPub.Models.Media", b =>
                {
                    b.HasOne("DiversityPub.Models.Activation", "Activation")
                        .WithMany("Medias")
                        .HasForeignKey("ActivationId");

                    b.HasOne("DiversityPub.Models.AgentTerrain", "AgentTerrain")
                        .WithMany("Medias")
                        .HasForeignKey("AgentTerrainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiversityPub.Models.Utilisateur", "ValidePar")
                        .WithMany()
                        .HasForeignKey("ValideParId");

                    b.Navigation("Activation");

                    b.Navigation("AgentTerrain");

                    b.Navigation("ValidePar");
                });

            modelBuilder.Entity("DiversityPub.Models.PositionGPS", b =>
                {
                    b.HasOne("DiversityPub.Models.AgentTerrain", "AgentTerrain")
                        .WithMany("PositionsGPS")
                        .HasForeignKey("AgentTerrainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AgentTerrain");
                });

            modelBuilder.Entity("DiversityPub.Models.Activation", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Incidents");

                    b.Navigation("Medias");
                });

            modelBuilder.Entity("DiversityPub.Models.AgentTerrain", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Incidents");

                    b.Navigation("Medias");

                    b.Navigation("PositionsGPS");
                });

            modelBuilder.Entity("DiversityPub.Models.Campagne", b =>
                {
                    b.Navigation("Activations");

                    b.Navigation("DemandesActivation");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("DiversityPub.Models.Client", b =>
                {
                    b.Navigation("Campagnes");

                    b.Navigation("DemandesActivation");
                });

            modelBuilder.Entity("DiversityPub.Models.Lieu", b =>
                {
                    b.Navigation("Activations");

                    b.Navigation("DemandesActivation");
                });

            modelBuilder.Entity("DiversityPub.Models.Utilisateur", b =>
                {
                    b.Navigation("AgentTerrain");

                    b.Navigation("Client");
                });
#pragma warning restore 612, 618
        }
    }
}
